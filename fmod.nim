import strformat

when defined(fmodDebugLog):
  var L {.compileTime.} = "L"
else:
  var L {.compileTime.} = ""

when defined(windows):
  when defined(amd64):
    const FmodDll = fmt"fmod{L}64.dll"
  when defined(i386):
    const FmodDll = fmt"fmod{L}.dll"

elif defined(macosx):
  const FmodDll = fmt"libfmod{L}.dylib"

else:
  const FmodDll = fmt"libfmod{L}.so"

{.pragma: fmodImport, dynlib: FmodDll.}


type
  FMOD_SYSTEM* = object
  FMOD_SOUND* = object
  FMOD_CHANNELCONTROL* = object
  FMOD_CHANNEL* = object
  FMOD_CHANNELGROUP* = object
  FMOD_SOUNDGROUP* = object
  FMOD_REVERB3D* = object
  FMOD_DSP* = object
  FMOD_DSPCONNECTION* = object
  FMOD_POLYGON* = object
  FMOD_GEOMETRY* = object
  FMOD_SYNCPOINT* = object

  FMOD_BOOL* = cint
  FMOD_MODE* = cuint
  FMOD_TIMEUNIT* = cuint
  FMOD_INITFLAGS* = cuint
  FMOD_DEBUG_FLAGS* = cuint
  FMOD_MEMORY_TYPE* = cuint
  FMOD_SYSTEM_CALLBACK_TYPE* = cuint
  FMOD_CHANNELMASK* = cuint
  FMOD_DRIVER_STATE* = cuint
  FMOD_PORT_TYPE* = cuint
  FMOD_PORT_INDEX* = culonglong

  FMOD_RESULT* = enum
    FMOD_OK, FMOD_ERR_BADCOMMAND, FMOD_ERR_CHANNEL_ALLOC, FMOD_ERR_CHANNEL_STOLEN,
    FMOD_ERR_DMA, FMOD_ERR_DSP_CONNECTION, FMOD_ERR_DSP_DONTPROCESS,
    FMOD_ERR_DSP_FORMAT, FMOD_ERR_DSP_INUSE, FMOD_ERR_DSP_NOTFOUND,
    FMOD_ERR_DSP_RESERVED, FMOD_ERR_DSP_SILENCE, FMOD_ERR_DSP_TYPE,
    FMOD_ERR_FILE_BAD, FMOD_ERR_FILE_COULDNOTSEEK, FMOD_ERR_FILE_DISKEJECTED,
    FMOD_ERR_FILE_EOF, FMOD_ERR_FILE_ENDOFDATA, FMOD_ERR_FILE_NOTFOUND,
    FMOD_ERR_FORMAT, FMOD_ERR_HEADER_MISMATCH, FMOD_ERR_HTTP, FMOD_ERR_HTTP_ACCESS,
    FMOD_ERR_HTTP_PROXY_AUTH, FMOD_ERR_HTTP_SERVER_ERROR, FMOD_ERR_HTTP_TIMEOUT,
    FMOD_ERR_INITIALIZATION, FMOD_ERR_INITIALIZED, FMOD_ERR_INTERNAL,
    FMOD_ERR_INVALID_FLOAT, FMOD_ERR_INVALID_HANDLE, FMOD_ERR_INVALID_PARAM,
    FMOD_ERR_INVALID_POSITION, FMOD_ERR_INVALID_SPEAKER,
    FMOD_ERR_INVALID_SYNCPOINT, FMOD_ERR_INVALID_THREAD, FMOD_ERR_INVALID_VECTOR,
    FMOD_ERR_MAXAUDIBLE, FMOD_ERR_MEMORY, FMOD_ERR_MEMORY_CANTPOINT,
    FMOD_ERR_NEEDS3D, FMOD_ERR_NEEDSHARDWARE, FMOD_ERR_NET_CONNECT,
    FMOD_ERR_NET_SOCKET_ERROR, FMOD_ERR_NET_URL, FMOD_ERR_NET_WOULD_BLOCK,
    FMOD_ERR_NOTREADY, FMOD_ERR_OUTPUT_ALLOCATED, FMOD_ERR_OUTPUT_CREATEBUFFER,
    FMOD_ERR_OUTPUT_DRIVERCALL, FMOD_ERR_OUTPUT_FORMAT, FMOD_ERR_OUTPUT_INIT,
    FMOD_ERR_OUTPUT_NODRIVERS, FMOD_ERR_PLUGIN, FMOD_ERR_PLUGIN_MISSING,
    FMOD_ERR_PLUGIN_RESOURCE, FMOD_ERR_PLUGIN_VERSION, FMOD_ERR_RECORD,
    FMOD_ERR_REVERB_CHANNELGROUP, FMOD_ERR_REVERB_INSTANCE, FMOD_ERR_SUBSOUNDS,
    FMOD_ERR_SUBSOUND_ALLOCATED, FMOD_ERR_SUBSOUND_CANTMOVE, FMOD_ERR_TAGNOTFOUND,
    FMOD_ERR_TOOMANYCHANNELS, FMOD_ERR_TRUNCATED, FMOD_ERR_UNIMPLEMENTED,
    FMOD_ERR_UNINITIALIZED, FMOD_ERR_UNSUPPORTED, FMOD_ERR_VERSION,
    FMOD_ERR_EVENT_ALREADY_LOADED, FMOD_ERR_EVENT_LIVEUPDATE_BUSY,
    FMOD_ERR_EVENT_LIVEUPDATE_MISMATCH, FMOD_ERR_EVENT_LIVEUPDATE_TIMEOUT,
    FMOD_ERR_EVENT_NOTFOUND, FMOD_ERR_STUDIO_UNINITIALIZED,
    FMOD_ERR_STUDIO_NOT_LOADED, FMOD_ERR_INVALID_STRING, FMOD_ERR_ALREADY_LOCKED,
    FMOD_ERR_NOT_LOCKED, FMOD_ERR_RECORD_DISCONNECTED, FMOD_ERR_TOOMANYSAMPLES,
    FMOD_RESULT_FORCEINT = 65536

  FMOD_CHANNELCONTROL_TYPE* = enum
    FMOD_CHANNELCONTROL_CHANNEL, FMOD_CHANNELCONTROL_CHANNELGROUP,
    FMOD_CHANNELCONTROL_FORCEINT = 65536

  FMOD_VECTOR* = object
    x*: cfloat
    y*: cfloat
    z*: cfloat

  FMOD_3D_ATTRIBUTES* = object
    position*: FMOD_VECTOR
    velocity*: FMOD_VECTOR
    forward*: FMOD_VECTOR
    up*: FMOD_VECTOR

  FMOD_GUID* = object
    Data1*: cuint
    Data2*: cushort
    Data3*: cushort
    Data4*: array[8, cuchar]

  FMOD_FILE_ASYNCDONE_FUNC* = proc (info: ptr FMOD_ASYNCREADINFO; result: FMOD_RESULT) {.cdecl.}
  FMOD_ASYNCREADINFO* = object
    handle*: pointer
    offset*: cuint
    sizebytes*: cuint
    priority*: cint
    userdata*: pointer
    buffer*: pointer
    bytesread*: cuint
    done*: FMOD_FILE_ASYNCDONE_FUNC

  FMOD_OUTPUTTYPE* = enum
    FMOD_OUTPUTTYPE_AUTODETECT, FMOD_OUTPUTTYPE_UNKNOWN, FMOD_OUTPUTTYPE_NOSOUND,
    FMOD_OUTPUTTYPE_WAVWRITER, FMOD_OUTPUTTYPE_NOSOUND_NRT,
    FMOD_OUTPUTTYPE_WAVWRITER_NRT, FMOD_OUTPUTTYPE_DSOUND, FMOD_OUTPUTTYPE_WINMM,
    FMOD_OUTPUTTYPE_WASAPI, FMOD_OUTPUTTYPE_ASIO, FMOD_OUTPUTTYPE_PULSEAUDIO,
    FMOD_OUTPUTTYPE_ALSA, FMOD_OUTPUTTYPE_COREAUDIO, FMOD_OUTPUTTYPE_XAUDIO,
    FMOD_OUTPUTTYPE_PS3, FMOD_OUTPUTTYPE_AUDIOTRACK, FMOD_OUTPUTTYPE_OPENSL,
    FMOD_OUTPUTTYPE_WIIU, FMOD_OUTPUTTYPE_AUDIOOUT, FMOD_OUTPUTTYPE_AUDIO3D,
    FMOD_OUTPUTTYPE_ATMOS, FMOD_OUTPUTTYPE_WEBAUDIO, FMOD_OUTPUTTYPE_NNAUDIO,
    FMOD_OUTPUTTYPE_WINSONIC, FMOD_OUTPUTTYPE_MAX,
    FMOD_OUTPUTTYPE_FORCEINT = 65536

  FMOD_DEBUG_MODE* = enum
    FMOD_DEBUG_MODE_TTY, FMOD_DEBUG_MODE_FILE, FMOD_DEBUG_MODE_CALLBACK,
    FMOD_DEBUG_MODE_FORCEINT = 65536

  FMOD_SPEAKERMODE* = enum
    FMOD_SPEAKERMODE_DEFAULT, FMOD_SPEAKERMODE_RAW, FMOD_SPEAKERMODE_MONO,
    FMOD_SPEAKERMODE_STEREO, FMOD_SPEAKERMODE_QUAD, FMOD_SPEAKERMODE_SURROUND,
    FMOD_SPEAKERMODE_5POINT1, FMOD_SPEAKERMODE_7POINT1,
    FMOD_SPEAKERMODE_7POINT1POINT4, FMOD_SPEAKERMODE_MAX,
    FMOD_SPEAKERMODE_FORCEINT = 65536

  FMOD_SPEAKER* = enum
    FMOD_SPEAKER_FRONT_LEFT, FMOD_SPEAKER_FRONT_RIGHT, FMOD_SPEAKER_FRONT_CENTER,
    FMOD_SPEAKER_LOW_FREQUENCY, FMOD_SPEAKER_SURROUND_LEFT,
    FMOD_SPEAKER_SURROUND_RIGHT, FMOD_SPEAKER_BACK_LEFT, FMOD_SPEAKER_BACK_RIGHT,
    FMOD_SPEAKER_TOP_FRONT_LEFT, FMOD_SPEAKER_TOP_FRONT_RIGHT,
    FMOD_SPEAKER_TOP_BACK_LEFT, FMOD_SPEAKER_TOP_BACK_RIGHT, FMOD_SPEAKER_MAX,
    FMOD_SPEAKER_FORCEINT = 65536

  FMOD_CHANNELORDER* = enum
    FMOD_CHANNELORDER_DEFAULT, FMOD_CHANNELORDER_WAVEFORMAT,
    FMOD_CHANNELORDER_PROTOOLS, FMOD_CHANNELORDER_ALLMONO,
    FMOD_CHANNELORDER_ALLSTEREO, FMOD_CHANNELORDER_ALSA, FMOD_CHANNELORDER_MAX,
    FMOD_CHANNELORDER_FORCEINT = 65536

  FMOD_PLUGINTYPE* = enum
    FMOD_PLUGINTYPE_OUTPUT, FMOD_PLUGINTYPE_CODEC, FMOD_PLUGINTYPE_DSP,
    FMOD_PLUGINTYPE_MAX, FMOD_PLUGINTYPE_FORCEINT = 65536

  FMOD_PLUGINLIST* = object
    `type`*: FMOD_PLUGINTYPE
    description*: pointer

  FMOD_SOUND_TYPE* = enum
    FMOD_SOUND_TYPE_UNKNOWN, FMOD_SOUND_TYPE_AIFF, FMOD_SOUND_TYPE_ASF,
    FMOD_SOUND_TYPE_DLS, FMOD_SOUND_TYPE_FLAC, FMOD_SOUND_TYPE_FSB,
    FMOD_SOUND_TYPE_IT, FMOD_SOUND_TYPE_MIDI, FMOD_SOUND_TYPE_MOD,
    FMOD_SOUND_TYPE_MPEG, FMOD_SOUND_TYPE_OGGVORBIS, FMOD_SOUND_TYPE_PLAYLIST,
    FMOD_SOUND_TYPE_RAW, FMOD_SOUND_TYPE_S3M, FMOD_SOUND_TYPE_USER,
    FMOD_SOUND_TYPE_WAV, FMOD_SOUND_TYPE_XM, FMOD_SOUND_TYPE_XMA,
    FMOD_SOUND_TYPE_AUDIOQUEUE, FMOD_SOUND_TYPE_AT9, FMOD_SOUND_TYPE_VORBIS,
    FMOD_SOUND_TYPE_MEDIA_FOUNDATION, FMOD_SOUND_TYPE_MEDIACODEC,
    FMOD_SOUND_TYPE_FADPCM, FMOD_SOUND_TYPE_MAX, FMOD_SOUND_TYPE_FORCEINT = 65536

  FMOD_SOUND_FORMAT* = enum
    FMOD_SOUND_FORMAT_NONE, FMOD_SOUND_FORMAT_PCM8, FMOD_SOUND_FORMAT_PCM16,
    FMOD_SOUND_FORMAT_PCM24, FMOD_SOUND_FORMAT_PCM32, FMOD_SOUND_FORMAT_PCMFLOAT,
    FMOD_SOUND_FORMAT_BITSTREAM, FMOD_SOUND_FORMAT_MAX,
    FMOD_SOUND_FORMAT_FORCEINT = 65536

  FMOD_OPENSTATE* = enum
    FMOD_OPENSTATE_READY = 0, FMOD_OPENSTATE_LOADING, FMOD_OPENSTATE_ERROR,
    FMOD_OPENSTATE_CONNECTING, FMOD_OPENSTATE_BUFFERING, FMOD_OPENSTATE_SEEKING,
    FMOD_OPENSTATE_PLAYING, FMOD_OPENSTATE_SETPOSITION, FMOD_OPENSTATE_MAX,
    FMOD_OPENSTATE_FORCEINT = 65536

  FMOD_SOUNDGROUP_BEHAVIOR* = enum
    FMOD_SOUNDGROUP_BEHAVIOR_FAIL, FMOD_SOUNDGROUP_BEHAVIOR_MUTE,
    FMOD_SOUNDGROUP_BEHAVIOR_STEALLOWEST, FMOD_SOUNDGROUP_BEHAVIOR_MAX,
    FMOD_SOUNDGROUP_BEHAVIOR_FORCEINT = 65536

  FMOD_CHANNELCONTROL_CALLBACK_TYPE* = enum
    FMOD_CHANNELCONTROL_CALLBACK_END, FMOD_CHANNELCONTROL_CALLBACK_VIRTUALVOICE,
    FMOD_CHANNELCONTROL_CALLBACK_SYNCPOINT,
    FMOD_CHANNELCONTROL_CALLBACK_OCCLUSION, FMOD_CHANNELCONTROL_CALLBACK_MAX,
    FMOD_CHANNELCONTROL_CALLBACK_FORCEINT = 65536

  FMOD_CHANNELCONTROL_DSP_INDEX* = enum
    FMOD_CHANNELCONTROL_DSP_TAIL = - 3, FMOD_CHANNELCONTROL_DSP_FADER = - 2,
    FMOD_CHANNELCONTROL_DSP_HEAD = - 1, FMOD_CHANNELCONTROL_DSP_FORCEINT = 65536

  FMOD_ERRORCALLBACK_INSTANCETYPE* = enum
    FMOD_ERRORCALLBACK_INSTANCETYPE_NONE, FMOD_ERRORCALLBACK_INSTANCETYPE_SYSTEM,
    FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNEL,
    FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELGROUP,
    FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELCONTROL,
    FMOD_ERRORCALLBACK_INSTANCETYPE_SOUND,
    FMOD_ERRORCALLBACK_INSTANCETYPE_SOUNDGROUP,
    FMOD_ERRORCALLBACK_INSTANCETYPE_DSP,
    FMOD_ERRORCALLBACK_INSTANCETYPE_DSPCONNECTION,
    FMOD_ERRORCALLBACK_INSTANCETYPE_GEOMETRY,
    FMOD_ERRORCALLBACK_INSTANCETYPE_REVERB3D,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_SYSTEM,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTDESCRIPTION,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTINSTANCE,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_PARAMETERINSTANCE,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BUS,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_VCA,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BANK,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_COMMANDREPLAY,
    FMOD_ERRORCALLBACK_INSTANCETYPE_FORCEINT = 65536

  FMOD_ERRORCALLBACK_INFO* = object
    result*: FMOD_RESULT
    instancetype*: FMOD_ERRORCALLBACK_INSTANCETYPE
    instance*: pointer
    functionname*: cstring
    functionparams*: cstring

  FMOD_DEBUG_CALLBACK* = proc (flags: FMOD_DEBUG_FLAGS; file: cstring; line: cint;
                            `func`: cstring; message: cstring): FMOD_RESULT {.cdecl.}

  FMOD_SYSTEM_CALLBACK* = proc (system: ptr FMOD_SYSTEM;
                             `type`: FMOD_SYSTEM_CALLBACK_TYPE;
                             commanddata1: pointer; commanddata2: pointer;
                             userdata: pointer): FMOD_RESULT {.cdecl.}

  FMOD_CHANNELCONTROL_CALLBACK* = proc (channelcontrol: ptr FMOD_CHANNELCONTROL;
                                     controltype: FMOD_CHANNELCONTROL_TYPE;
      callbacktype: FMOD_CHANNELCONTROL_CALLBACK_TYPE; commanddata1: pointer;
                                     commanddata2: pointer): FMOD_RESULT {.cdecl.}

  FMOD_SOUND_NONBLOCK_CALLBACK* = proc (sound: ptr FMOD_SOUND; result: FMOD_RESULT): FMOD_RESULT {.cdecl.}

  FMOD_SOUND_PCMREAD_CALLBACK* = proc (sound: ptr FMOD_SOUND; data: pointer;
                                       datalen: cuint): FMOD_RESULT {.cdecl.}

  FMOD_SOUND_PCMSETPOS_CALLBACK* = proc (sound: ptr FMOD_SOUND; subsound: cint;
                                         position: cuint; postype: FMOD_TIMEUNIT): FMOD_RESULT {.cdecl.}

  FMOD_FILE_OPEN_CALLBACK* = proc (name: cstring; filesize: ptr cuint;
                                   handle: ptr pointer; userdata: pointer): FMOD_RESULT {.cdecl.}

  FMOD_FILE_CLOSE_CALLBACK* = proc (handle: pointer; userdata: pointer): FMOD_RESULT {.cdecl.}

  FMOD_FILE_READ_CALLBACK* = proc (handle: pointer; buffer: pointer; sizebytes: cuint;
                                   bytesread: ptr cuint; userdata: pointer): FMOD_RESULT {.cdecl.}

  FMOD_FILE_SEEK_CALLBACK* = proc (handle: pointer; pos: cuint; userdata: pointer): FMOD_RESULT {.cdecl.}

  FMOD_FILE_ASYNCREAD_CALLBACK* = proc (info: ptr FMOD_ASYNCREADINFO;
                                     userdata: pointer): FMOD_RESULT {.cdecl.}

  FMOD_FILE_ASYNCCANCEL_CALLBACK* = proc (info: ptr FMOD_ASYNCREADINFO;
                                       userdata: pointer): FMOD_RESULT {.cdecl.}

  FMOD_MEMORY_ALLOC_CALLBACK* = proc (size: cuint; `type`: FMOD_MEMORY_TYPE;
                                      sourcestr: cstring): pointer {.cdecl.}

  FMOD_MEMORY_REALLOC_CALLBACK* = proc (`ptr`: pointer; size: cuint;
                                        `type`: FMOD_MEMORY_TYPE; sourcestr: cstring): pointer {.cdecl.}

  FMOD_MEMORY_FREE_CALLBACK* = proc (`ptr`: pointer; `type`: FMOD_MEMORY_TYPE;
                                     sourcestr: cstring) {.cdecl.}

  FMOD_3D_ROLLOFF_CALLBACK* = proc (channelcontrol: ptr FMOD_CHANNELCONTROL;
                                    distance: cfloat): cfloat {.cdecl.}

  FMOD_DSP_RESAMPLER* = enum
    FMOD_DSP_RESAMPLER_DEFAULT, FMOD_DSP_RESAMPLER_NOINTERP,
    FMOD_DSP_RESAMPLER_LINEAR, FMOD_DSP_RESAMPLER_CUBIC,
    FMOD_DSP_RESAMPLER_SPLINE, FMOD_DSP_RESAMPLER_MAX,
    FMOD_DSP_RESAMPLER_FORCEINT = 65536

  FMOD_DSPCONNECTION_TYPE* = enum
    FMOD_DSPCONNECTION_TYPE_STANDARD, FMOD_DSPCONNECTION_TYPE_SIDECHAIN,
    FMOD_DSPCONNECTION_TYPE_SEND, FMOD_DSPCONNECTION_TYPE_SEND_SIDECHAIN,
    FMOD_DSPCONNECTION_TYPE_MAX, FMOD_DSPCONNECTION_TYPE_FORCEINT = 65536

  FMOD_TAGTYPE* = enum
    FMOD_TAGTYPE_UNKNOWN = 0, FMOD_TAGTYPE_ID3V1, FMOD_TAGTYPE_ID3V2,
    FMOD_TAGTYPE_VORBISCOMMENT, FMOD_TAGTYPE_SHOUTCAST, FMOD_TAGTYPE_ICECAST,
    FMOD_TAGTYPE_ASF, FMOD_TAGTYPE_MIDI, FMOD_TAGTYPE_PLAYLIST, FMOD_TAGTYPE_FMOD,
    FMOD_TAGTYPE_USER, FMOD_TAGTYPE_MAX, FMOD_TAGTYPE_FORCEINT = 65536

  FMOD_TAGDATATYPE* = enum
    FMOD_TAGDATATYPE_BINARY = 0, FMOD_TAGDATATYPE_INT, FMOD_TAGDATATYPE_FLOAT,
    FMOD_TAGDATATYPE_STRING, FMOD_TAGDATATYPE_STRING_UTF16,
    FMOD_TAGDATATYPE_STRING_UTF16BE, FMOD_TAGDATATYPE_STRING_UTF8,
    FMOD_TAGDATATYPE_CDTOC, FMOD_TAGDATATYPE_MAX,
    FMOD_TAGDATATYPE_FORCEINT = 65536

  FMOD_TAG* = object
    `type`*: FMOD_TAGTYPE
    datatype*: FMOD_TAGDATATYPE
    name*: cstring
    data*: pointer
    datalen*: cuint
    updated*: FMOD_BOOL

  FMOD_CREATESOUNDEXINFO* = object
    cbsize*: cint
    length*: cuint
    fileoffset*: cuint
    numchannels*: cint
    defaultfrequency*: cint
    format*: FMOD_SOUND_FORMAT
    decodebuffersize*: cuint
    initialsubsound*: cint
    numsubsounds*: cint
    inclusionlist*: ptr cint
    inclusionlistnum*: cint
    pcmreadcallback*: FMOD_SOUND_PCMREAD_CALLBACK
    pcmsetposcallback*: FMOD_SOUND_PCMSETPOS_CALLBACK
    nonblockcallback*: FMOD_SOUND_NONBLOCK_CALLBACK
    dlsname*: cstring
    encryptionkey*: cstring
    maxpolyphony*: cint
    userdata*: pointer
    suggestedsoundtype*: FMOD_SOUND_TYPE
    fileuseropen*: FMOD_FILE_OPEN_CALLBACK
    fileuserclose*: FMOD_FILE_CLOSE_CALLBACK
    fileuserread*: FMOD_FILE_READ_CALLBACK
    fileuserseek*: FMOD_FILE_SEEK_CALLBACK
    fileuserasyncread*: FMOD_FILE_ASYNCREAD_CALLBACK
    fileuserasynccancel*: FMOD_FILE_ASYNCCANCEL_CALLBACK
    fileuserdata*: pointer
    filebuffersize*: cint
    channelorder*: FMOD_CHANNELORDER
    channelmask*: FMOD_CHANNELMASK
    initialsoundgroup*: ptr FMOD_SOUNDGROUP
    initialseekposition*: cuint
    initialseekpostype*: FMOD_TIMEUNIT
    ignoresetfilesystem*: cint
    audioqueuepolicy*: cuint
    minmidigranularity*: cuint
    nonblockthreadid*: cint
    fsbguid*: ptr FMOD_GUID

  FMOD_REVERB_PROPERTIES* = object
    decayTime*: cfloat
    earlyDelay*: cfloat
    lateDelay*: cfloat
    hfReference*: cfloat
    hfDecayRatio*: cfloat
    diffusion*: cfloat
    density*: cfloat
    lowShelfFrequency*: cfloat
    lowShelfGain*: cfloat
    highCut*: cfloat
    earlyLateMix*: cfloat
    wetLevel*: cfloat

  FMOD_ADVANCEDSETTINGS* = object
    cbSize*: cint
    maxMPEGCodecs*: cint
    maxADPCMCodecs*: cint
    maxXMACodecs*: cint
    maxVorbisCodecs*: cint
    maxAT9Codecs*: cint
    maxFADPCMCodecs*: cint
    maxPCMCodecs*: cint
    ASIONumChannels*: cint
    ASIOChannelList*: cstringArray
    ASIOSpeakerList*: ptr FMOD_SPEAKER
    HRTFMinAngle*: cfloat
    HRTFMaxAngle*: cfloat
    HRTFFreq*: cfloat
    vol0virtualvol*: cfloat
    defaultDecodeBufferSize*: cuint
    profilePort*: cushort
    geometryMaxFadeTime*: cuint
    distanceFilterCenterFreq*: cfloat
    reverb3Dinstance*: cint
    DSPBufferPoolSize*: cint
    stackSizeStream*: cuint
    stackSizeNonBlocking*: cuint
    stackSizeMixer*: cuint
    resamplerMethod*: FMOD_DSP_RESAMPLER
    commandQueueSize*: cuint
    randomSeed*: cuint

  FMOD_CODEC_OPEN_CALLBACK* = proc (codec_state: ptr FMOD_CODEC_STATE;
                                 usermode: FMOD_MODE;
                                 userexinfo: ptr FMOD_CREATESOUNDEXINFO): FMOD_RESULT {.cdecl.}

  FMOD_CODEC_CLOSE_CALLBACK* = proc (codec_state: ptr FMOD_CODEC_STATE): FMOD_RESULT {.cdecl.}

  FMOD_CODEC_READ_CALLBACK* = proc (codec_state: ptr FMOD_CODEC_STATE;
                                 buffer: pointer; samples_in: cuint;
                                 samples_out: ptr cuint): FMOD_RESULT {.cdecl.}

  FMOD_CODEC_GETLENGTH_CALLBACK* = proc (codec_state: ptr FMOD_CODEC_STATE;
                                      length: ptr cuint; lengthtype: FMOD_TIMEUNIT): FMOD_RESULT {.cdecl.}
  FMOD_CODEC_SETPOSITION_CALLBACK* = proc (codec_state: ptr FMOD_CODEC_STATE;
                                        subsound: cint; position: cuint;
                                        postype: FMOD_TIMEUNIT): FMOD_RESULT {.cdecl.}

  FMOD_CODEC_GETPOSITION_CALLBACK* = proc (codec_state: ptr FMOD_CODEC_STATE;
                                        position: ptr cuint; postype: FMOD_TIMEUNIT): FMOD_RESULT {.cdecl.}

  FMOD_CODEC_SOUNDCREATE_CALLBACK* = proc (codec_state: ptr FMOD_CODEC_STATE;
                                        subsound: cint; sound: ptr FMOD_SOUND): FMOD_RESULT {.cdecl.}

  FMOD_CODEC_METADATA_CALLBACK* = proc (codec_state: ptr FMOD_CODEC_STATE;
                                     tagtype: FMOD_TAGTYPE; name: cstring;
                                     data: pointer; datalen: cuint;
                                     datatype: FMOD_TAGDATATYPE; unique: cint): FMOD_RESULT {.cdecl.}

  FMOD_CODEC_GETWAVEFORMAT_CALLBACK* = proc (codec_state: ptr FMOD_CODEC_STATE;
      index: cint; waveformat: ptr FMOD_CODEC_WAVEFORMAT): FMOD_RESULT {.cdecl.}

  FMOD_CODEC_DESCRIPTION* = object
    name*: cstring
    version*: cuint
    defaultasstream*: cint
    timeunits*: FMOD_TIMEUNIT
    open*: FMOD_CODEC_OPEN_CALLBACK
    close*: FMOD_CODEC_CLOSE_CALLBACK
    read*: FMOD_CODEC_READ_CALLBACK
    getlength*: FMOD_CODEC_GETLENGTH_CALLBACK
    setposition*: FMOD_CODEC_SETPOSITION_CALLBACK
    getposition*: FMOD_CODEC_GETPOSITION_CALLBACK
    soundcreate*: FMOD_CODEC_SOUNDCREATE_CALLBACK
    getwaveformat*: FMOD_CODEC_GETWAVEFORMAT_CALLBACK

  FMOD_CODEC_WAVEFORMAT* = object
    name*: cstring
    format*: FMOD_SOUND_FORMAT
    channels*: cint
    frequency*: cint
    lengthbytes*: cuint
    lengthpcm*: cuint
    pcmblocksize*: cuint
    loopstart*: cint
    loopend*: cint
    mode*: FMOD_MODE
    channelmask*: FMOD_CHANNELMASK
    channelorder*: FMOD_CHANNELORDER
    peakvolume*: cfloat

  FMOD_CODEC_STATE* = object
    numsubsounds*: cint
    waveformat*: ptr FMOD_CODEC_WAVEFORMAT
    plugindata*: pointer
    filehandle*: pointer
    filesize*: cuint
    fileread*: FMOD_FILE_READ_CALLBACK
    fileseek*: FMOD_FILE_SEEK_CALLBACK
    metadata*: FMOD_CODEC_METADATA_CALLBACK
    waveformatversion*: cint

  FMOD_DSP_TYPE* = enum
    FMOD_DSP_TYPE_UNKNOWN, FMOD_DSP_TYPE_MIXER, FMOD_DSP_TYPE_OSCILLATOR,
    FMOD_DSP_TYPE_LOWPASS, FMOD_DSP_TYPE_ITLOWPASS, FMOD_DSP_TYPE_HIGHPASS,
    FMOD_DSP_TYPE_ECHO, FMOD_DSP_TYPE_FADER, FMOD_DSP_TYPE_FLANGE,
    FMOD_DSP_TYPE_DISTORTION, FMOD_DSP_TYPE_NORMALIZE, FMOD_DSP_TYPE_LIMITER,
    FMOD_DSP_TYPE_PARAMEQ, FMOD_DSP_TYPE_PITCHSHIFT, FMOD_DSP_TYPE_CHORUS,
    FMOD_DSP_TYPE_VSTPLUGIN, FMOD_DSP_TYPE_WINAMPPLUGIN, FMOD_DSP_TYPE_ITECHO,
    FMOD_DSP_TYPE_COMPRESSOR, FMOD_DSP_TYPE_SFXREVERB,
    FMOD_DSP_TYPE_LOWPASS_SIMPLE, FMOD_DSP_TYPE_DELAY, FMOD_DSP_TYPE_TREMOLO,
    FMOD_DSP_TYPE_LADSPAPLUGIN, FMOD_DSP_TYPE_SEND, FMOD_DSP_TYPE_RETURN,
    FMOD_DSP_TYPE_HIGHPASS_SIMPLE, FMOD_DSP_TYPE_PAN, FMOD_DSP_TYPE_THREE_EQ,
    FMOD_DSP_TYPE_FFT, FMOD_DSP_TYPE_LOUDNESS_METER,
    FMOD_DSP_TYPE_ENVELOPEFOLLOWER, FMOD_DSP_TYPE_CONVOLUTIONREVERB,
    FMOD_DSP_TYPE_CHANNELMIX, FMOD_DSP_TYPE_TRANSCEIVER, FMOD_DSP_TYPE_OBJECTPAN,
    FMOD_DSP_TYPE_MULTIBAND_EQ, FMOD_DSP_TYPE_MAX, FMOD_DSP_TYPE_FORCEINT = 65536

  FMOD_DSP_OSCILLATOR* = enum
    FMOD_DSP_OSCILLATOR_TYPE, FMOD_DSP_OSCILLATOR_RATE

  FMOD_DSP_LOWPASS* = enum
    FMOD_DSP_LOWPASS_CUTOFF, FMOD_DSP_LOWPASS_RESONANCE

  FMOD_DSP_ITLOWPASS* = enum
    FMOD_DSP_ITLOWPASS_CUTOFF, FMOD_DSP_ITLOWPASS_RESONANCE

  FMOD_DSP_HIGHPASS* = enum
    FMOD_DSP_HIGHPASS_CUTOFF, FMOD_DSP_HIGHPASS_RESONANCE

  FMOD_DSP_ECHO* = enum
    FMOD_DSP_ECHO_DELAY, FMOD_DSP_ECHO_FEEDBACK, FMOD_DSP_ECHO_DRYLEVEL,
    FMOD_DSP_ECHO_WETLEVEL

  FMOD_DSP_FADER* = enum
    FMOD_DSP_FADER_GAIN

  FMOD_DSP_FLANGE* = enum
    FMOD_DSP_FLANGE_MIX, FMOD_DSP_FLANGE_DEPTH, FMOD_DSP_FLANGE_RATE

  FMOD_DSP_DISTORTION* = enum
    FMOD_DSP_DISTORTION_LEVEL

  FMOD_DSP_NORMALIZE* = enum
    FMOD_DSP_NORMALIZE_FADETIME, FMOD_DSP_NORMALIZE_THRESHHOLD,
    FMOD_DSP_NORMALIZE_MAXAMP

  FMOD_DSP_LIMITER* = enum
    FMOD_DSP_LIMITER_RELEASETIME, FMOD_DSP_LIMITER_CEILING,
    FMOD_DSP_LIMITER_MAXIMIZERGAIN, FMOD_DSP_LIMITER_MODE

  FMOD_DSP_PARAMEQ* = enum
    FMOD_DSP_PARAMEQ_CENTER, FMOD_DSP_PARAMEQ_BANDWIDTH, FMOD_DSP_PARAMEQ_GAIN

  FMOD_DSP_MULTIBAND_EQ* = enum
    FMOD_DSP_MULTIBAND_EQ_A_FILTER, FMOD_DSP_MULTIBAND_EQ_A_FREQUENCY,
    FMOD_DSP_MULTIBAND_EQ_A_Q, FMOD_DSP_MULTIBAND_EQ_A_GAIN,
    FMOD_DSP_MULTIBAND_EQ_B_FILTER, FMOD_DSP_MULTIBAND_EQ_B_FREQUENCY,
    FMOD_DSP_MULTIBAND_EQ_B_Q, FMOD_DSP_MULTIBAND_EQ_B_GAIN,
    FMOD_DSP_MULTIBAND_EQ_C_FILTER, FMOD_DSP_MULTIBAND_EQ_C_FREQUENCY,
    FMOD_DSP_MULTIBAND_EQ_C_Q, FMOD_DSP_MULTIBAND_EQ_C_GAIN,
    FMOD_DSP_MULTIBAND_EQ_D_FILTER, FMOD_DSP_MULTIBAND_EQ_D_FREQUENCY,
    FMOD_DSP_MULTIBAND_EQ_D_Q, FMOD_DSP_MULTIBAND_EQ_D_GAIN,
    FMOD_DSP_MULTIBAND_EQ_E_FILTER, FMOD_DSP_MULTIBAND_EQ_E_FREQUENCY,
    FMOD_DSP_MULTIBAND_EQ_E_Q, FMOD_DSP_MULTIBAND_EQ_E_GAIN

  FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE* = enum
    FMOD_DSP_MULTIBAND_EQ_FILTER_DISABLED,
    FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_12DB,
    FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_24DB,
    FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_48DB,
    FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_12DB,
    FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_24DB,
    FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_48DB,
    FMOD_DSP_MULTIBAND_EQ_FILTER_LOWSHELF,
    FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHSHELF, FMOD_DSP_MULTIBAND_EQ_FILTER_PEAKING,
    FMOD_DSP_MULTIBAND_EQ_FILTER_BANDPASS, FMOD_DSP_MULTIBAND_EQ_FILTER_NOTCH,
    FMOD_DSP_MULTIBAND_EQ_FILTER_ALLPASS

  FMOD_DSP_PITCHSHIFT* = enum
    FMOD_DSP_PITCHSHIFT_PITCH, FMOD_DSP_PITCHSHIFT_FFTSIZE,
    FMOD_DSP_PITCHSHIFT_OVERLAP, FMOD_DSP_PITCHSHIFT_MAXCHANNELS

  FMOD_DSP_CHORUS* = enum
    FMOD_DSP_CHORUS_MIX, FMOD_DSP_CHORUS_RATE, FMOD_DSP_CHORUS_DEPTH

  FMOD_DSP_ITECHO* = enum
    FMOD_DSP_ITECHO_WETDRYMIX, FMOD_DSP_ITECHO_FEEDBACK,
    FMOD_DSP_ITECHO_LEFTDELAY, FMOD_DSP_ITECHO_RIGHTDELAY,
    FMOD_DSP_ITECHO_PANDELAY

  FMOD_DSP_COMPRESSOR* = enum
    FMOD_DSP_COMPRESSOR_THRESHOLD, FMOD_DSP_COMPRESSOR_RATIO,
    FMOD_DSP_COMPRESSOR_ATTACK, FMOD_DSP_COMPRESSOR_RELEASE,
    FMOD_DSP_COMPRESSOR_GAINMAKEUP, FMOD_DSP_COMPRESSOR_USESIDECHAIN,
    FMOD_DSP_COMPRESSOR_LINKED

  FMOD_DSP_SFXREVERB* = enum
    FMOD_DSP_SFXREVERB_DECAYTIME, FMOD_DSP_SFXREVERB_EARLYDELAY,
    FMOD_DSP_SFXREVERB_LATEDELAY, FMOD_DSP_SFXREVERB_HFREFERENCE,
    FMOD_DSP_SFXREVERB_HFDECAYRATIO, FMOD_DSP_SFXREVERB_DIFFUSION,
    FMOD_DSP_SFXREVERB_DENSITY, FMOD_DSP_SFXREVERB_LOWSHELFFREQUENCY,
    FMOD_DSP_SFXREVERB_LOWSHELFGAIN, FMOD_DSP_SFXREVERB_HIGHCUT,
    FMOD_DSP_SFXREVERB_EARLYLATEMIX, FMOD_DSP_SFXREVERB_WETLEVEL,
    FMOD_DSP_SFXREVERB_DRYLEVEL

  FMOD_DSP_LOWPASS_SIMPLE* = enum
    FMOD_DSP_LOWPASS_SIMPLE_CUTOFF

  FMOD_DSP_DELAY* = enum
    FMOD_DSP_DELAY_CH0, FMOD_DSP_DELAY_CH1, FMOD_DSP_DELAY_CH2, FMOD_DSP_DELAY_CH3,
    FMOD_DSP_DELAY_CH4, FMOD_DSP_DELAY_CH5, FMOD_DSP_DELAY_CH6, FMOD_DSP_DELAY_CH7,
    FMOD_DSP_DELAY_CH8, FMOD_DSP_DELAY_CH9, FMOD_DSP_DELAY_CH10,
    FMOD_DSP_DELAY_CH11, FMOD_DSP_DELAY_CH12, FMOD_DSP_DELAY_CH13,
    FMOD_DSP_DELAY_CH14, FMOD_DSP_DELAY_CH15, FMOD_DSP_DELAY_MAXDELAY

  FMOD_DSP_TREMOLO* = enum
    FMOD_DSP_TREMOLO_FREQUENCY, FMOD_DSP_TREMOLO_DEPTH, FMOD_DSP_TREMOLO_SHAPE,
    FMOD_DSP_TREMOLO_SKEW, FMOD_DSP_TREMOLO_DUTY, FMOD_DSP_TREMOLO_SQUARE,
    FMOD_DSP_TREMOLO_PHASE, FMOD_DSP_TREMOLO_SPREAD

  FMOD_DSP_SEND* = enum
    FMOD_DSP_SEND_RETURNID, FMOD_DSP_SEND_LEVEL

  FMOD_DSP_RETURN* = enum
    FMOD_DSP_RETURN_ID, FMOD_DSP_RETURN_INPUT_SPEAKER_MODE

  FMOD_DSP_HIGHPASS_SIMPLE* = enum
    FMOD_DSP_HIGHPASS_SIMPLE_CUTOFF

  FMOD_DSP_PAN_2D_STEREO_MODE_TYPE* = enum
    FMOD_DSP_PAN_2D_STEREO_MODE_DISTRIBUTED, FMOD_DSP_PAN_2D_STEREO_MODE_DISCRETE

  FMOD_DSP_PAN_MODE_TYPE* = enum
    FMOD_DSP_PAN_MODE_MONO, FMOD_DSP_PAN_MODE_STEREO, FMOD_DSP_PAN_MODE_SURROUND

  FMOD_DSP_PAN_3D_ROLLOFF_TYPE* = enum
    FMOD_DSP_PAN_3D_ROLLOFF_LINEARSQUARED, FMOD_DSP_PAN_3D_ROLLOFF_LINEAR,
    FMOD_DSP_PAN_3D_ROLLOFF_INVERSE, FMOD_DSP_PAN_3D_ROLLOFF_INVERSETAPERED,
    FMOD_DSP_PAN_3D_ROLLOFF_CUSTOM

  FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE* = enum
    FMOD_DSP_PAN_3D_EXTENT_MODE_AUTO, FMOD_DSP_PAN_3D_EXTENT_MODE_USER,
    FMOD_DSP_PAN_3D_EXTENT_MODE_OFF

  FMOD_DSP_PAN* = enum
    FMOD_DSP_PAN_MODE, FMOD_DSP_PAN_2D_STEREO_POSITION, FMOD_DSP_PAN_2D_DIRECTION,
    FMOD_DSP_PAN_2D_EXTENT, FMOD_DSP_PAN_2D_ROTATION, FMOD_DSP_PAN_2D_LFE_LEVEL,
    FMOD_DSP_PAN_2D_STEREO_MODE, FMOD_DSP_PAN_2D_STEREO_SEPARATION,
    FMOD_DSP_PAN_2D_STEREO_AXIS, FMOD_DSP_PAN_ENABLED_SPEAKERS,
    FMOD_DSP_PAN_3D_POSITION, FMOD_DSP_PAN_3D_ROLLOFF,
    FMOD_DSP_PAN_3D_MIN_DISTANCE, FMOD_DSP_PAN_3D_MAX_DISTANCE,
    FMOD_DSP_PAN_3D_EXTENT_MODE, FMOD_DSP_PAN_3D_SOUND_SIZE,
    FMOD_DSP_PAN_3D_MIN_EXTENT, FMOD_DSP_PAN_3D_PAN_BLEND,
    FMOD_DSP_PAN_LFE_UPMIX_ENABLED, FMOD_DSP_PAN_OVERALL_GAIN,
    FMOD_DSP_PAN_SURROUND_SPEAKER_MODE, FMOD_DSP_PAN_2D_HEIGHT_BLEND

  FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE* = enum
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_12DB, FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_24DB,
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_48DB

  FMOD_DSP_THREE_EQ* = enum
    FMOD_DSP_THREE_EQ_LOWGAIN, FMOD_DSP_THREE_EQ_MIDGAIN,
    FMOD_DSP_THREE_EQ_HIGHGAIN, FMOD_DSP_THREE_EQ_LOWCROSSOVER,
    FMOD_DSP_THREE_EQ_HIGHCROSSOVER, FMOD_DSP_THREE_EQ_CROSSOVERSLOPE

  FMOD_DSP_FFT_WINDOW* = enum
    FMOD_DSP_FFT_WINDOW_RECT, FMOD_DSP_FFT_WINDOW_TRIANGLE,
    FMOD_DSP_FFT_WINDOW_HAMMING, FMOD_DSP_FFT_WINDOW_HANNING,
    FMOD_DSP_FFT_WINDOW_BLACKMAN, FMOD_DSP_FFT_WINDOW_BLACKMANHARRIS

  FMOD_DSP_FFT* = enum
    FMOD_DSP_FFT_WINDOWSIZE, FMOD_DSP_FFT_WINDOWTYPE, FMOD_DSP_FFT_SPECTRUMDATA,
    FMOD_DSP_FFT_DOMINANT_FREQ

  FMOD_DSP_ENVELOPEFOLLOWER* = enum
    FMOD_DSP_ENVELOPEFOLLOWER_ATTACK, FMOD_DSP_ENVELOPEFOLLOWER_RELEASE,
    FMOD_DSP_ENVELOPEFOLLOWER_ENVELOPE, FMOD_DSP_ENVELOPEFOLLOWER_USESIDECHAIN

  FMOD_DSP_CONVOLUTION_REVERB* = enum
    FMOD_DSP_CONVOLUTION_REVERB_PARAM_IR, FMOD_DSP_CONVOLUTION_REVERB_PARAM_WET,
    FMOD_DSP_CONVOLUTION_REVERB_PARAM_DRY,
    FMOD_DSP_CONVOLUTION_REVERB_PARAM_LINKED

  FMOD_DSP_CHANNELMIX_OUTPUT* = enum
    FMOD_DSP_CHANNELMIX_OUTPUT_DEFAULT, FMOD_DSP_CHANNELMIX_OUTPUT_ALLMONO,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALLSTEREO, FMOD_DSP_CHANNELMIX_OUTPUT_ALLQUAD,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALL5POINT1, FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALLLFE

  FMOD_DSP_CHANNELMIX* = enum
    FMOD_DSP_CHANNELMIX_OUTPUTGROUPING, FMOD_DSP_CHANNELMIX_GAIN_CH0,
    FMOD_DSP_CHANNELMIX_GAIN_CH1, FMOD_DSP_CHANNELMIX_GAIN_CH2,
    FMOD_DSP_CHANNELMIX_GAIN_CH3, FMOD_DSP_CHANNELMIX_GAIN_CH4,
    FMOD_DSP_CHANNELMIX_GAIN_CH5, FMOD_DSP_CHANNELMIX_GAIN_CH6,
    FMOD_DSP_CHANNELMIX_GAIN_CH7, FMOD_DSP_CHANNELMIX_GAIN_CH8,
    FMOD_DSP_CHANNELMIX_GAIN_CH9, FMOD_DSP_CHANNELMIX_GAIN_CH10,
    FMOD_DSP_CHANNELMIX_GAIN_CH11, FMOD_DSP_CHANNELMIX_GAIN_CH12,
    FMOD_DSP_CHANNELMIX_GAIN_CH13, FMOD_DSP_CHANNELMIX_GAIN_CH14,
    FMOD_DSP_CHANNELMIX_GAIN_CH15, FMOD_DSP_CHANNELMIX_GAIN_CH16,
    FMOD_DSP_CHANNELMIX_GAIN_CH17, FMOD_DSP_CHANNELMIX_GAIN_CH18,
    FMOD_DSP_CHANNELMIX_GAIN_CH19, FMOD_DSP_CHANNELMIX_GAIN_CH20,
    FMOD_DSP_CHANNELMIX_GAIN_CH21, FMOD_DSP_CHANNELMIX_GAIN_CH22,
    FMOD_DSP_CHANNELMIX_GAIN_CH23, FMOD_DSP_CHANNELMIX_GAIN_CH24,
    FMOD_DSP_CHANNELMIX_GAIN_CH25, FMOD_DSP_CHANNELMIX_GAIN_CH26,
    FMOD_DSP_CHANNELMIX_GAIN_CH27, FMOD_DSP_CHANNELMIX_GAIN_CH28,
    FMOD_DSP_CHANNELMIX_GAIN_CH29, FMOD_DSP_CHANNELMIX_GAIN_CH30,
    FMOD_DSP_CHANNELMIX_GAIN_CH31

  FMOD_DSP_TRANSCEIVER_SPEAKERMODE* = enum
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_AUTO = - 1,
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_MONO = 0,
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_STEREO,
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_SURROUND

  FMOD_DSP_TRANSCEIVER* = enum
    FMOD_DSP_TRANSCEIVER_TRANSMIT, FMOD_DSP_TRANSCEIVER_GAIN,
    FMOD_DSP_TRANSCEIVER_CHANNEL, FMOD_DSP_TRANSCEIVER_TRANSMITSPEAKERMODE

  FMOD_DSP_OBJECTPAN* = enum
    FMOD_DSP_OBJECTPAN_3D_POSITION, FMOD_DSP_OBJECTPAN_3D_ROLLOFF,
    FMOD_DSP_OBJECTPAN_3D_MIN_DISTANCE, FMOD_DSP_OBJECTPAN_3D_MAX_DISTANCE,
    FMOD_DSP_OBJECTPAN_3D_EXTENT_MODE, FMOD_DSP_OBJECTPAN_3D_SOUND_SIZE,
    FMOD_DSP_OBJECTPAN_3D_MIN_EXTENT, FMOD_DSP_OBJECTPAN_OVERALL_GAIN,
    FMOD_DSP_OBJECTPAN_OUTPUTGAIN

  FMOD_DSP_BUFFER_ARRAY* = object
    numbuffers*: cint
    buffernumchannels*: ptr cint
    bufferchannelmask*: ptr FMOD_CHANNELMASK
    buffers*: ptr ptr cfloat
    speakermode*: FMOD_SPEAKERMODE

  FMOD_DSP_PROCESS_OPERATION* = enum
    FMOD_DSP_PROCESS_PERFORM, FMOD_DSP_PROCESS_QUERY

  FMOD_COMPLEX* = object
    real*: cfloat
    imag*: cfloat

  FMOD_DSP_PAN_SURROUND_FLAGS* = enum
    FMOD_DSP_PAN_SURROUND_DEFAULT = 0,
    FMOD_DSP_PAN_SURROUND_ROTATION_NOT_BIASED = 1,
    FMOD_DSP_PAN_SURROUND_FLAGS_FORCEINT = 65536

  FMOD_DSP_CREATE_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE): FMOD_RESULT {.cdecl.}

  FMOD_DSP_RELEASE_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE): FMOD_RESULT {.cdecl.}

  FMOD_DSP_RESET_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE): FMOD_RESULT {.cdecl.}

  FMOD_DSP_READ_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE; inbuffer: ptr cfloat;
                               outbuffer: ptr cfloat; length: cuint;
                               inchannels: cint; outchannels: ptr cint): FMOD_RESULT {.cdecl.}

  FMOD_DSP_PROCESS_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE; length: cuint;
                                  inbufferarray: ptr FMOD_DSP_BUFFER_ARRAY;
                                  outbufferarray: ptr FMOD_DSP_BUFFER_ARRAY;
                                  inputsidle: FMOD_BOOL;
                                  op: FMOD_DSP_PROCESS_OPERATION): FMOD_RESULT {.cdecl.}

  FMOD_DSP_SETPOSITION_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE; pos: cuint): FMOD_RESULT {.cdecl.}

  FMOD_DSP_SHOULDIPROCESS_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE;
      inputsidle: FMOD_BOOL; length: cuint; inmask: FMOD_CHANNELMASK;
      inchannels: cint; speakermode: FMOD_SPEAKERMODE): FMOD_RESULT {.cdecl.}

  FMOD_DSP_SETPARAM_FLOAT_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE;
      index: cint; value: cfloat): FMOD_RESULT {.cdecl.}

  FMOD_DSP_SETPARAM_INT_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE; index: cint;
                                       value: cint): FMOD_RESULT {.cdecl.}

  FMOD_DSP_SETPARAM_BOOL_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE; index: cint;
                                        value: FMOD_BOOL): FMOD_RESULT {.cdecl.}

  FMOD_DSP_SETPARAM_DATA_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE; index: cint;
                                        data: pointer; length: cuint): FMOD_RESULT {.cdecl.}

  FMOD_DSP_GETPARAM_FLOAT_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE;
      index: cint; value: ptr cfloat; valuestr: cstring): FMOD_RESULT {.cdecl.}

  FMOD_DSP_GETPARAM_INT_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE; index: cint;
                                       value: ptr cint; valuestr: cstring): FMOD_RESULT {.cdecl.}

  FMOD_DSP_GETPARAM_BOOL_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE; index: cint;
                                        value: ptr FMOD_BOOL; valuestr: cstring): FMOD_RESULT {.cdecl.}

  FMOD_DSP_GETPARAM_DATA_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE; index: cint;
                                        data: ptr pointer; length: ptr cuint;
                                        valuestr: cstring): FMOD_RESULT {.cdecl.}

  FMOD_DSP_SYSTEM_REGISTER_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE): FMOD_RESULT {.cdecl.}

  FMOD_DSP_SYSTEM_DEREGISTER_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE): FMOD_RESULT {.cdecl.}

  FMOD_DSP_SYSTEM_MIX_CALLBACK* = proc (dsp_state: ptr FMOD_DSP_STATE; stage: cint): FMOD_RESULT {.cdecl.}

  FMOD_DSP_ALLOC_FUNC* = proc (size: cuint; `type`: FMOD_MEMORY_TYPE;
                               sourcestr: cstring): pointer {.cdecl.}

  FMOD_DSP_REALLOC_FUNC* = proc (`ptr`: pointer; size: cuint; `type`: FMOD_MEMORY_TYPE;
                                 sourcestr: cstring): pointer {.cdecl.}

  FMOD_DSP_FREE_FUNC* = proc (`ptr`: pointer; `type`: FMOD_MEMORY_TYPE;
                              sourcestr: cstring) {.cdecl.}

  FMOD_DSP_LOG_FUNC* = proc (level: FMOD_DEBUG_FLAGS; file: cstring; line: cint;
                             function: cstring; string: cstring) {.varargs, cdecl.}

  FMOD_DSP_GETSAMPLERATE_FUNC* = proc (dsp_state: ptr FMOD_DSP_STATE; rate: ptr cint): FMOD_RESULT {.cdecl.}

  FMOD_DSP_GETBLOCKSIZE_FUNC* = proc (dsp_state: ptr FMOD_DSP_STATE;
                                      blocksize: ptr cuint): FMOD_RESULT {.cdecl.}

  FMOD_DSP_GETSPEAKERMODE_FUNC* = proc (dsp_state: ptr FMOD_DSP_STATE;
                                        speakermode_mixer: ptr FMOD_SPEAKERMODE;
                                        speakermode_output: ptr FMOD_SPEAKERMODE): FMOD_RESULT {.cdecl.}

  FMOD_DSP_GETCLOCK_FUNC* = proc (dsp_state: ptr FMOD_DSP_STATE;
                                  clock: ptr culonglong; offset: ptr cuint;
                                  length: ptr cuint): FMOD_RESULT {.cdecl.}

  FMOD_DSP_GETLISTENERATTRIBUTES_FUNC* = proc (dsp_state: ptr FMOD_DSP_STATE;
      numlisteners: ptr cint; attributes: ptr FMOD_3D_ATTRIBUTES): FMOD_RESULT {.cdecl.}

  FMOD_DSP_GETUSERDATA_FUNC* = proc (dsp_state: ptr FMOD_DSP_STATE;
                                     userdata: ptr pointer): FMOD_RESULT {.cdecl.}

  FMOD_DSP_DFT_FFTREAL_FUNC* = proc (dsp_state: ptr FMOD_DSP_STATE; size: cint;
                                     signal: ptr cfloat; dft: ptr FMOD_COMPLEX;
                                     window: ptr cfloat; signalhop: cint): FMOD_RESULT {.cdecl.}

  FMOD_DSP_DFT_IFFTREAL_FUNC* = proc (dsp_state: ptr FMOD_DSP_STATE; size: cint;
                                      dft: ptr FMOD_COMPLEX; signal: ptr cfloat;
                                      window: ptr cfloat; signalhop: cint): FMOD_RESULT {.cdecl.}

  FMOD_DSP_PAN_SUMMONOMATRIX_FUNC* = proc (dsp_state: ptr FMOD_DSP_STATE;
                                           sourceSpeakerMode: FMOD_SPEAKERMODE;
                                           lowFrequencyGain: cfloat;
                                           overallGain: cfloat; matrix: ptr cfloat): FMOD_RESULT {.cdecl.}

  FMOD_DSP_PAN_SUMSTEREOMATRIX_FUNC* = proc (dsp_state: ptr FMOD_DSP_STATE;
      sourceSpeakerMode: FMOD_SPEAKERMODE; pan: cfloat; lowFrequencyGain: cfloat;
      overallGain: cfloat; matrixHop: cint; matrix: ptr cfloat): FMOD_RESULT {.cdecl.}

  FMOD_DSP_PAN_SUMSURROUNDMATRIX_FUNC* = proc (dsp_state: ptr FMOD_DSP_STATE;
      sourceSpeakerMode: FMOD_SPEAKERMODE; targetSpeakerMode: FMOD_SPEAKERMODE;
      direction: cfloat; extent: cfloat; rotation: cfloat; lowFrequencyGain: cfloat;
      overallGain: cfloat; matrixHop: cint; matrix: ptr cfloat;
      flags: FMOD_DSP_PAN_SURROUND_FLAGS): FMOD_RESULT {.cdecl.}

  FMOD_DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC* = proc (dsp_state: ptr FMOD_DSP_STATE;
      targetSpeakerMode: FMOD_SPEAKERMODE; direction: cfloat; extent: cfloat;
      lowFrequencyGain: cfloat; overallGain: cfloat; matrixHop: cint;
      matrix: ptr cfloat): FMOD_RESULT {.cdecl.}

  FMOD_DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC* = proc (
      dsp_state: ptr FMOD_DSP_STATE; targetSpeakerMode: FMOD_SPEAKERMODE;
      direction: cfloat; extent: cfloat; rotation: cfloat; lowFrequencyGain: cfloat;
      overallGain: cfloat; matrixHop: cint; matrix: ptr cfloat): FMOD_RESULT {.cdecl.}

  FMOD_DSP_PAN_GETROLLOFFGAIN_FUNC* = proc (dsp_state: ptr FMOD_DSP_STATE;
      rolloff: FMOD_DSP_PAN_3D_ROLLOFF_TYPE; distance: cfloat; mindistance: cfloat;
      maxdistance: cfloat; gain: ptr cfloat): FMOD_RESULT {.cdecl.}

  FMOD_DSP_PARAMETER_TYPE* = enum
    FMOD_DSP_PARAMETER_TYPE_FLOAT, FMOD_DSP_PARAMETER_TYPE_INT,
    FMOD_DSP_PARAMETER_TYPE_BOOL, FMOD_DSP_PARAMETER_TYPE_DATA,
    FMOD_DSP_PARAMETER_TYPE_MAX, FMOD_DSP_PARAMETER_TYPE_FORCEINT = 65536

  FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE* = enum
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_LINEAR,
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_AUTO,
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_PIECEWISE_LINEAR,
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_FORCEINT = 65536

  FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR* = object
    numpoints*: cint
    pointparamvalues*: ptr cfloat
    pointpositions*: ptr cfloat

  FMOD_DSP_PARAMETER_FLOAT_MAPPING* = object
    `type`*: FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE
    piecewiselinearmapping*: FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR

  FMOD_DSP_PARAMETER_DESC_FLOAT* = object
    min*: cfloat
    max*: cfloat
    defaultval*: cfloat
    mapping*: FMOD_DSP_PARAMETER_FLOAT_MAPPING

  FMOD_DSP_PARAMETER_DESC_INT* = object
    min*: cint
    max*: cint
    defaultval*: cint
    goestoinf*: FMOD_BOOL
    valuenames*: cstringArray

  FMOD_DSP_PARAMETER_DESC_BOOL* = object
    defaultval*: FMOD_BOOL
    valuenames*: cstringArray

  FMOD_DSP_PARAMETER_DESC_DATA* = object
    datatype*: cint

  FMOD_DSP_PARAMETER_DESC_UNION* {.union.} = object
    floatdesc*: FMOD_DSP_PARAMETER_DESC_FLOAT
    intdesc*: FMOD_DSP_PARAMETER_DESC_INT
    booldesc*: FMOD_DSP_PARAMETER_DESC_BOOL
    datadesc*: FMOD_DSP_PARAMETER_DESC_DATA

  FMOD_DSP_PARAMETER_DESC* = object
    `type`*: FMOD_DSP_PARAMETER_TYPE
    name*: array[16, char]
    label*: array[16, char]
    description*: cstring
    data*: FMOD_DSP_PARAMETER_DESC_UNION

  FMOD_DSP_PARAMETER_DATA_TYPE* = enum
    FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES_MULTI = - 5,
    FMOD_DSP_PARAMETER_DATA_TYPE_FFT = - 4,
    FMOD_DSP_PARAMETER_DATA_TYPE_SIDECHAIN = - 3,
    FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES = - 2,
    FMOD_DSP_PARAMETER_DATA_TYPE_OVERALLGAIN = - 1,
    FMOD_DSP_PARAMETER_DATA_TYPE_USER = 0

  FMOD_DSP_PARAMETER_OVERALLGAIN* = object
    linear_gain*: cfloat
    linear_gain_additive*: cfloat

  FMOD_DSP_PARAMETER_3DATTRIBUTES* = object
    relative*: FMOD_3D_ATTRIBUTES
    absolute*: FMOD_3D_ATTRIBUTES

  FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI* = object
    numlisteners*: cint
    relative*: array[8, FMOD_3D_ATTRIBUTES]
    weight*: array[8, cfloat]
    absolute*: FMOD_3D_ATTRIBUTES

  FMOD_DSP_PARAMETER_SIDECHAIN* = object
    sidechainenable*: FMOD_BOOL

  FMOD_DSP_PARAMETER_FFT* = object
    length*: cint
    numchannels*: cint
    spectrum*: array[32, ptr cfloat]

  FMOD_DSP_DESCRIPTION* = object
    pluginsdkversion*: cuint
    name*: array[32, char]
    version*: cuint
    numinputbuffers*: cint
    numoutputbuffers*: cint
    create*: FMOD_DSP_CREATE_CALLBACK
    release*: FMOD_DSP_RELEASE_CALLBACK
    reset*: FMOD_DSP_RESET_CALLBACK
    read*: FMOD_DSP_READ_CALLBACK
    process*: FMOD_DSP_PROCESS_CALLBACK
    setposition*: FMOD_DSP_SETPOSITION_CALLBACK
    numparameters*: cint
    paramdesc*: ptr ptr FMOD_DSP_PARAMETER_DESC
    setparameterfloat*: FMOD_DSP_SETPARAM_FLOAT_CALLBACK
    setparameterint*: FMOD_DSP_SETPARAM_INT_CALLBACK
    setparameterbool*: FMOD_DSP_SETPARAM_BOOL_CALLBACK
    setparameterdata*: FMOD_DSP_SETPARAM_DATA_CALLBACK
    getparameterfloat*: FMOD_DSP_GETPARAM_FLOAT_CALLBACK
    getparameterint*: FMOD_DSP_GETPARAM_INT_CALLBACK
    getparameterbool*: FMOD_DSP_GETPARAM_BOOL_CALLBACK
    getparameterdata*: FMOD_DSP_GETPARAM_DATA_CALLBACK
    shouldiprocess*: FMOD_DSP_SHOULDIPROCESS_CALLBACK
    userdata*: pointer
    sys_register*: FMOD_DSP_SYSTEM_REGISTER_CALLBACK
    sys_deregister*: FMOD_DSP_SYSTEM_DEREGISTER_CALLBACK
    sys_mix*: FMOD_DSP_SYSTEM_MIX_CALLBACK

  FMOD_DSP_STATE_DFT_FUNCTIONS* = object
    fftreal*: FMOD_DSP_DFT_FFTREAL_FUNC
    inversefftreal*: FMOD_DSP_DFT_IFFTREAL_FUNC

  FMOD_DSP_STATE_PAN_FUNCTIONS* = object
    summonomatrix*: FMOD_DSP_PAN_SUMMONOMATRIX_FUNC
    sumstereomatrix*: FMOD_DSP_PAN_SUMSTEREOMATRIX_FUNC
    sumsurroundmatrix*: FMOD_DSP_PAN_SUMSURROUNDMATRIX_FUNC
    summonotosurroundmatrix*: FMOD_DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC
    sumstereotosurroundmatrix*: FMOD_DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC
    getrolloffgain*: FMOD_DSP_PAN_GETROLLOFFGAIN_FUNC

  FMOD_DSP_STATE_FUNCTIONS* = object
    alloc*: FMOD_DSP_ALLOC_FUNC
    realloc*: FMOD_DSP_REALLOC_FUNC
    free*: FMOD_DSP_FREE_FUNC
    getsamplerate*: FMOD_DSP_GETSAMPLERATE_FUNC
    getblocksize*: FMOD_DSP_GETBLOCKSIZE_FUNC
    dft*: ptr FMOD_DSP_STATE_DFT_FUNCTIONS
    pan*: ptr FMOD_DSP_STATE_PAN_FUNCTIONS
    getspeakermode*: FMOD_DSP_GETSPEAKERMODE_FUNC
    getclock*: FMOD_DSP_GETCLOCK_FUNC
    getlistenerattributes*: FMOD_DSP_GETLISTENERATTRIBUTES_FUNC
    log*: FMOD_DSP_LOG_FUNC
    getuserdata*: FMOD_DSP_GETUSERDATA_FUNC

  FMOD_DSP_STATE* = object
    instance*: pointer
    plugindata*: pointer
    channelmask*: FMOD_CHANNELMASK
    source_speakermode*: FMOD_SPEAKERMODE
    sidechaindata*: ptr cfloat
    sidechainchannels*: cint
    functions*: ptr FMOD_DSP_STATE_FUNCTIONS
    systemobject*: cint

  FMOD_DSP_METERING_INFO* = object
    numsamples*: cint
    peaklevel*: array[32, cfloat]
    rmslevel*: array[32, cfloat]
    numchannels*: cshort

  FMOD_OUTPUT_GETNUMDRIVERS_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE;
      numdrivers: ptr cint): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_GETDRIVERINFO_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE;
      id: cint; name: cstring; namelen: cint; guid: ptr FMOD_GUID; systemrate: ptr cint;
      speakermode: ptr FMOD_SPEAKERMODE; speakermodechannels: ptr cint): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_INIT_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE;
                                  selecteddriver: cint; flags: FMOD_INITFLAGS;
                                  outputrate: ptr cint;
                                  speakermode: ptr FMOD_SPEAKERMODE;
                                  speakermodechannels: ptr cint;
                                  outputformat: ptr FMOD_SOUND_FORMAT;
                                  dspbufferlength: cint; dspnumbuffers: cint;
                                  extradriverdata: pointer): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_START_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE): FMOD_RESULT {.cdecl.}
  FMOD_OUTPUT_STOP_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE): FMOD_RESULT {.cdecl.}
  FMOD_OUTPUT_CLOSE_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE): FMOD_RESULT {.cdecl.}
  FMOD_OUTPUT_UPDATE_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_GETHANDLE_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE;
                                       handle: ptr pointer): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_GETPOSITION_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE;
      pcm: ptr cuint): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_LOCK_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE;
                                  offset: cuint; length: cuint; ptr1: ptr pointer;
                                  ptr2: ptr pointer; len1: ptr cuint; len2: ptr cuint): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_UNLOCK_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE;
                                    ptr1: pointer; ptr2: pointer; len1: cuint;
                                    len2: cuint): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_MIXER_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_OBJECT3DGETINFO_CALLBACK* = proc (
      output_state: ptr FMOD_OUTPUT_STATE; maxhardwareobjects: ptr cint): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_OBJECT3DALLOC_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE;
      object3d: ptr pointer): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_OBJECT3DFREE_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE;
      object3d: pointer): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_OBJECT3DUPDATE_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE;
      object3d: pointer; info: ptr FMOD_OUTPUT_OBJECT3DINFO): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_OPENPORT_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE;
                                         portType: FMOD_PORT_TYPE;
                                         portIndex: FMOD_PORT_INDEX;
                                         portId: ptr cint; portRate: ptr cint;
                                         portChannels: ptr cint;
                                         portFormat: ptr FMOD_SOUND_FORMAT): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_CLOSEPORT_CALLBACK* = proc (output_state: ptr FMOD_OUTPUT_STATE;
                                          portId: cint): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_READFROMMIXER_FUNC* = proc (output_state: ptr FMOD_OUTPUT_STATE;
                                          buffer: pointer; length: cuint): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_COPYPORT_FUNC* = proc (output_state: ptr FMOD_OUTPUT_STATE;
                                     portId: cint; buffer: pointer; length: cuint): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_REQUESTRESET_FUNC* = proc (output_state: ptr FMOD_OUTPUT_STATE): FMOD_RESULT {.cdecl.}

  FMOD_OUTPUT_ALLOC_FUNC* = proc (size: cuint; align: cuint; file: cstring; line: cint): pointer {.cdecl.}

  FMOD_OUTPUT_FREE_FUNC* = proc (`ptr`: pointer; file: cstring; line: cint) {.cdecl.}

  FMOD_OUTPUT_LOG_FUNC* = proc (level: FMOD_DEBUG_FLAGS; file: cstring; line: cint;
                                function: cstring; string: cstring) {.varargs, cdecl.}

  FMOD_OUTPUT_DESCRIPTION* = object
    apiversion*: cuint
    name*: cstring
    version*: cuint
    polling*: cint
    getnumdrivers*: FMOD_OUTPUT_GETNUMDRIVERS_CALLBACK
    getdriverinfo*: FMOD_OUTPUT_GETDRIVERINFO_CALLBACK
    init*: FMOD_OUTPUT_INIT_CALLBACK
    start*: FMOD_OUTPUT_START_CALLBACK
    stop*: FMOD_OUTPUT_STOP_CALLBACK
    close*: FMOD_OUTPUT_CLOSE_CALLBACK
    update*: FMOD_OUTPUT_UPDATE_CALLBACK
    gethandle*: FMOD_OUTPUT_GETHANDLE_CALLBACK
    getposition*: FMOD_OUTPUT_GETPOSITION_CALLBACK
    lock*: FMOD_OUTPUT_LOCK_CALLBACK
    unlock*: FMOD_OUTPUT_UNLOCK_CALLBACK
    mixer*: FMOD_OUTPUT_MIXER_CALLBACK
    object3dgetinfo*: FMOD_OUTPUT_OBJECT3DGETINFO_CALLBACK
    object3dalloc*: FMOD_OUTPUT_OBJECT3DALLOC_CALLBACK
    object3dfree*: FMOD_OUTPUT_OBJECT3DFREE_CALLBACK
    object3dupdate*: FMOD_OUTPUT_OBJECT3DUPDATE_CALLBACK
    openport*: FMOD_OUTPUT_OPENPORT_CALLBACK
    closeport*: FMOD_OUTPUT_CLOSEPORT_CALLBACK

  FMOD_OUTPUT_STATE* = object
    plugindata*: pointer
    readfrommixer*: FMOD_OUTPUT_READFROMMIXER_FUNC
    alloc*: FMOD_OUTPUT_ALLOC_FUNC
    free*: FMOD_OUTPUT_FREE_FUNC
    log*: FMOD_OUTPUT_LOG_FUNC
    copyport*: FMOD_OUTPUT_COPYPORT_FUNC
    requestreset*: FMOD_OUTPUT_REQUESTRESET_FUNC

  FMOD_OUTPUT_OBJECT3DINFO* = object
    buffer*: ptr cfloat
    bufferlength*: cuint
    position*: FMOD_VECTOR
    gain*: cfloat
    spread*: cfloat
    priority*: cfloat


proc FMOD_Memory_Initialize*(poolmem: pointer; poollen: cint;
                            useralloc: FMOD_MEMORY_ALLOC_CALLBACK;
                            userrealloc: FMOD_MEMORY_REALLOC_CALLBACK;
                            userfree: FMOD_MEMORY_FREE_CALLBACK;
                            memtypeflags: FMOD_MEMORY_TYPE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Memory_Initialize".}
proc FMOD_Memory_GetStats*(currentalloced: ptr cint; maxalloced: ptr cint;

                          blocking: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Memory_GetStats".}
proc FMOD_Debug_Initialize*(flags: FMOD_DEBUG_FLAGS; mode: FMOD_DEBUG_MODE;

                           callback: FMOD_DEBUG_CALLBACK; filename: cstring): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Debug_Initialize".}
proc FMOD_File_SetDiskBusy*(busy: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_File_SetDiskBusy".}

proc FMOD_File_GetDiskBusy*(busy: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_File_GetDiskBusy".}

proc create*(system: ptr ptr FMOD_SYSTEM): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_Create".}

proc release*(system: ptr FMOD_SYSTEM): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_Release".}

proc setOutput*(system: ptr FMOD_SYSTEM; output: FMOD_OUTPUTTYPE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetOutput".}

proc getOutput*(system: ptr FMOD_SYSTEM; output: ptr FMOD_OUTPUTTYPE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetOutput".}

proc getNumDrivers*(system: ptr FMOD_SYSTEM; numdrivers: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetNumDrivers".}

proc getDriverInfo*(system: ptr FMOD_SYSTEM; id: cint; name: cstring;
                               namelen: cint; guid: ptr FMOD_GUID;
                               systemrate: ptr cint;
                               speakermode: ptr FMOD_SPEAKERMODE;
                               speakermodechannels: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetDriverInfo".}

proc setDriver*(system: ptr FMOD_SYSTEM; driver: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetDriver".}

proc getDriver*(system: ptr FMOD_SYSTEM; driver: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetDriver".}

proc setSoftwareChannels*(system: ptr FMOD_SYSTEM;
                                     numsoftwarechannels: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetSoftwareChannels".}

proc getSoftwareChannels*(system: ptr FMOD_SYSTEM;
                                     numsoftwarechannels: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetSoftwareChannels".}

proc setSoftwareFormat*(system: ptr FMOD_SYSTEM; samplerate: cint;
                                   speakermode: FMOD_SPEAKERMODE;
                                   numrawspeakers: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetSoftwareFormat".}

proc getSoftwareFormat*(system: ptr FMOD_SYSTEM; samplerate: ptr cint;
                                   speakermode: ptr FMOD_SPEAKERMODE;
                                   numrawspeakers: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetSoftwareFormat".}

proc setDSPBufferSize*(system: ptr FMOD_SYSTEM; bufferlength: cuint;
                                  numbuffers: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetDSPBufferSize".}

proc getDSPBufferSize*(system: ptr FMOD_SYSTEM; bufferlength: ptr cuint;
                                  numbuffers: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetDSPBufferSize".}

proc setFileSystem*(system: ptr FMOD_SYSTEM;
                               useropen: FMOD_FILE_OPEN_CALLBACK;
                               userclose: FMOD_FILE_CLOSE_CALLBACK;
                               userread: FMOD_FILE_READ_CALLBACK;
                               userseek: FMOD_FILE_SEEK_CALLBACK;
                               userasyncread: FMOD_FILE_ASYNCREAD_CALLBACK;
                               userasynccancel: FMOD_FILE_ASYNCCANCEL_CALLBACK;
                               blockalign: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetFileSystem".}

proc attachFileSystem*(system: ptr FMOD_SYSTEM;
                                  useropen: FMOD_FILE_OPEN_CALLBACK;
                                  userclose: FMOD_FILE_CLOSE_CALLBACK;
                                  userread: FMOD_FILE_READ_CALLBACK;
                                  userseek: FMOD_FILE_SEEK_CALLBACK): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_AttachFileSystem".}

proc setAdvancedSettings*(system: ptr FMOD_SYSTEM;
                                     settings: ptr FMOD_ADVANCEDSETTINGS): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetAdvancedSettings".}

proc getAdvancedSettings*(system: ptr FMOD_SYSTEM;
                                     settings: ptr FMOD_ADVANCEDSETTINGS): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetAdvancedSettings".}

proc setCallback*(system: ptr FMOD_SYSTEM;
                             callback: FMOD_SYSTEM_CALLBACK;
                             callbackmask: FMOD_SYSTEM_CALLBACK_TYPE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetCallback".}

proc setPluginPath*(system: ptr FMOD_SYSTEM; path: cstring): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetPluginPath".}

proc loadPlugin*(system: ptr FMOD_SYSTEM; filename: cstring;
                            handle: ptr cuint; priority: cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_LoadPlugin".}

proc unloadPlugin*(system: ptr FMOD_SYSTEM; handle: cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_UnloadPlugin".}

proc getNumNestedPlugins*(system: ptr FMOD_SYSTEM; handle: cuint;
                                     count: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetNumNestedPlugins".}

proc getNestedPlugin*(system: ptr FMOD_SYSTEM; handle: cuint; index: cint;
                                 nestedhandle: ptr cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetNestedPlugin".}

proc getNumPlugins*(system: ptr FMOD_SYSTEM;
                               plugintype: FMOD_PLUGINTYPE; numplugins: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetNumPlugins".}

proc getPluginHandle*(system: ptr FMOD_SYSTEM;
                                 plugintype: FMOD_PLUGINTYPE; index: cint;
                                 handle: ptr cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetPluginHandle".}

proc getPluginInfo*(system: ptr FMOD_SYSTEM; handle: cuint;
                               plugintype: ptr FMOD_PLUGINTYPE; name: cstring;
                               namelen: cint; version: ptr cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetPluginInfo".}

proc setOutputByPlugin*(system: ptr FMOD_SYSTEM; handle: cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetOutputByPlugin".}

proc getOutputByPlugin*(system: ptr FMOD_SYSTEM; handle: ptr cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetOutputByPlugin".}

proc createDSPByPlugin*(system: ptr FMOD_SYSTEM; handle: cuint;
                                   dsp: ptr ptr FMOD_DSP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_CreateDSPByPlugin".}

proc getDSPInfoByPlugin*(system: ptr FMOD_SYSTEM; handle: cuint;
                                    description: ptr ptr FMOD_DSP_DESCRIPTION): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetDSPInfoByPlugin".}

proc registerCodec*(system: ptr FMOD_SYSTEM;
                               description: ptr FMOD_CODEC_DESCRIPTION;
                               handle: ptr cuint; priority: cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_RegisterCodec".}

proc registerDSP*(system: ptr FMOD_SYSTEM;
                             description: ptr FMOD_DSP_DESCRIPTION;
                             handle: ptr cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_RegisterDSP".}

proc registerOutput*(system: ptr FMOD_SYSTEM;
                                description: ptr FMOD_OUTPUT_DESCRIPTION;
                                handle: ptr cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_RegisterOutput".}

proc init*(system: ptr FMOD_SYSTEM; maxchannels: cint;
                      flags: FMOD_INITFLAGS; extradriverdata: pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_Init".}

proc close*(system: ptr FMOD_SYSTEM): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_Close".}

proc update*(system: ptr FMOD_SYSTEM): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_Update".}

proc setSpeakerPosition*(system: ptr FMOD_SYSTEM; speaker: FMOD_SPEAKER;
                                    x: cfloat; y: cfloat; active: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetSpeakerPosition".}

proc getSpeakerPosition*(system: ptr FMOD_SYSTEM; speaker: FMOD_SPEAKER;
                                    x: ptr cfloat; y: ptr cfloat;
                                    active: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetSpeakerPosition".}

proc setStreamBufferSize*(system: ptr FMOD_SYSTEM;
                                     filebuffersize: cuint;
                                     filebuffersizetype: FMOD_TIMEUNIT): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetStreamBufferSize".}

proc getStreamBufferSize*(system: ptr FMOD_SYSTEM;
                                     filebuffersize: ptr cuint;
                                     filebuffersizetype: ptr FMOD_TIMEUNIT): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetStreamBufferSize".}

proc set3DSettings*(system: ptr FMOD_SYSTEM; dopplerscale: cfloat;
                               distancefactor: cfloat; rolloffscale: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_Set3DSettings".}

proc get3DSettings*(system: ptr FMOD_SYSTEM; dopplerscale: ptr cfloat;
                               distancefactor: ptr cfloat; rolloffscale: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_Get3DSettings".}

proc set3DNumListeners*(system: ptr FMOD_SYSTEM; numlisteners: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_Set3DNumListeners".}

proc get3DNumListeners*(system: ptr FMOD_SYSTEM; numlisteners: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_Get3DNumListeners".}

proc set3DListenerAttributes*(system: ptr FMOD_SYSTEM; listener: cint;
    pos: ptr FMOD_VECTOR; vel: ptr FMOD_VECTOR; forward: ptr FMOD_VECTOR;
    up: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_Set3DListenerAttributes".}

proc get3DListenerAttributes*(system: ptr FMOD_SYSTEM; listener: cint;
    pos: ptr FMOD_VECTOR; vel: ptr FMOD_VECTOR; forward: ptr FMOD_VECTOR;
    up: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_Get3DListenerAttributes".}

proc set3DRolloffCallback*(system: ptr FMOD_SYSTEM;
                                      callback: FMOD_3D_ROLLOFF_CALLBACK): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_Set3DRolloffCallback".}

proc mixerSuspend*(system: ptr FMOD_SYSTEM): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_MixerSuspend".}

proc mixerResume*(system: ptr FMOD_SYSTEM): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_MixerResume".}

proc getDefaultMixMatrix*(system: ptr FMOD_SYSTEM;
                                     sourcespeakermode: FMOD_SPEAKERMODE;
                                     targetspeakermode: FMOD_SPEAKERMODE;
                                     matrix: ptr cfloat; matrixhop: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetDefaultMixMatrix".}

proc getSpeakerModeChannels*(system: ptr FMOD_SYSTEM;
                                        mode: FMOD_SPEAKERMODE; channels: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetSpeakerModeChannels".}

proc getVersion*(system: ptr FMOD_SYSTEM; version: ptr cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetVersion".}

proc getOutputHandle*(system: ptr FMOD_SYSTEM; handle: ptr pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetOutputHandle".}

proc getChannelsPlaying*(system: ptr FMOD_SYSTEM; channels: ptr cint;
                                    realchannels: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetChannelsPlaying".}

proc getCPUUsage*(system: ptr FMOD_SYSTEM; dsp: ptr cfloat;
                             stream: ptr cfloat; geometry: ptr cfloat;
                             update: ptr cfloat; total: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetCPUUsage".}

proc getFileUsage*(system: ptr FMOD_SYSTEM;
                              sampleBytesRead: ptr clonglong;
                              streamBytesRead: ptr clonglong;
                              otherBytesRead: ptr clonglong): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetFileUsage".}

proc getSoundRAM*(system: ptr FMOD_SYSTEM; currentalloced: ptr cint;
                             maxalloced: ptr cint; total: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetSoundRAM".}

proc createSound*(system: ptr FMOD_SYSTEM; name_or_data: cstring;
                             mode: FMOD_MODE; exinfo: ptr FMOD_CREATESOUNDEXINFO;
                             sound: ptr ptr FMOD_SOUND): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_CreateSound".}

proc createStream*(system: ptr FMOD_SYSTEM; name_or_data: cstring;
                              mode: FMOD_MODE; exinfo: ptr FMOD_CREATESOUNDEXINFO;
                              sound: ptr ptr FMOD_SOUND): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_CreateStream".}

proc createDSP*(system: ptr FMOD_SYSTEM;
                           description: ptr FMOD_DSP_DESCRIPTION;
                           dsp: ptr ptr FMOD_DSP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_CreateDSP".}

proc createDSPByType*(system: ptr FMOD_SYSTEM; `type`: FMOD_DSP_TYPE;
                                 dsp: ptr ptr FMOD_DSP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_CreateDSPByType".}

proc createChannelGroup*(system: ptr FMOD_SYSTEM; name: cstring;
                                    channelgroup: ptr ptr FMOD_CHANNELGROUP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_CreateChannelGroup".}

proc createSoundGroup*(system: ptr FMOD_SYSTEM; name: cstring;
                                  soundgroup: ptr ptr FMOD_SOUNDGROUP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_CreateSoundGroup".}

proc createReverb3D*(system: ptr FMOD_SYSTEM;
                                reverb: ptr ptr FMOD_REVERB3D): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_CreateReverb3D".}

proc playSound*(system: ptr FMOD_SYSTEM; sound: ptr FMOD_SOUND;
                           channelgroup: ptr FMOD_CHANNELGROUP; paused: FMOD_BOOL;
                           channel: ptr ptr FMOD_CHANNEL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_PlaySound".}

proc playDSP*(system: ptr FMOD_SYSTEM; dsp: ptr FMOD_DSP;
                         channelgroup: ptr FMOD_CHANNELGROUP; paused: FMOD_BOOL;
                         channel: ptr ptr FMOD_CHANNEL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_PlayDSP".}

proc getChannel*(system: ptr FMOD_SYSTEM; channelid: cint;
                            channel: ptr ptr FMOD_CHANNEL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetChannel".}

proc getMasterChannelGroup*(system: ptr FMOD_SYSTEM;
                                       channelgroup: ptr ptr FMOD_CHANNELGROUP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetMasterChannelGroup".}

proc getMasterSoundGroup*(system: ptr FMOD_SYSTEM;
                                     soundgroup: ptr ptr FMOD_SOUNDGROUP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetMasterSoundGroup".}

proc attachChannelGroupToPort*(system: ptr FMOD_SYSTEM;
    portType: FMOD_PORT_TYPE; portIndex: FMOD_PORT_INDEX;
    channelgroup: ptr FMOD_CHANNELGROUP; passThru: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_AttachChannelGroupToPort".}

proc detachChannelGroupFromPort*(system: ptr FMOD_SYSTEM;
    channelgroup: ptr FMOD_CHANNELGROUP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_DetachChannelGroupFromPort".}

proc setReverbProperties*(system: ptr FMOD_SYSTEM; instance: cint;
                                     prop: ptr FMOD_REVERB_PROPERTIES): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetReverbProperties".}

proc getReverbProperties*(system: ptr FMOD_SYSTEM; instance: cint;
                                     prop: ptr FMOD_REVERB_PROPERTIES): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetReverbProperties".}

proc lockDSP*(system: ptr FMOD_SYSTEM): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_LockDSP".}

proc unlockDSP*(system: ptr FMOD_SYSTEM): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_UnlockDSP".}

proc getRecordNumDrivers*(system: ptr FMOD_SYSTEM; numdrivers: ptr cint;
                                     numconnected: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetRecordNumDrivers".}

proc getRecordDriverInfo*(system: ptr FMOD_SYSTEM; id: cint;
                                     name: cstring; namelen: cint;
                                     guid: ptr FMOD_GUID; systemrate: ptr cint;
                                     speakermode: ptr FMOD_SPEAKERMODE;
                                     speakermodechannels: ptr cint;
                                     state: ptr FMOD_DRIVER_STATE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetRecordDriverInfo".}

proc getRecordPosition*(system: ptr FMOD_SYSTEM; id: cint;
                                   position: ptr cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetRecordPosition".}

proc recordStart*(system: ptr FMOD_SYSTEM; id: cint;
                             sound: ptr FMOD_SOUND; loop: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_RecordStart".}

proc recordStop*(system: ptr FMOD_SYSTEM; id: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_RecordStop".}

proc isRecording*(system: ptr FMOD_SYSTEM; id: cint;
                             recording: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_IsRecording".}

proc createGeometry*(system: ptr FMOD_SYSTEM; maxpolygons: cint;
                                maxvertices: cint; geometry: ptr ptr FMOD_GEOMETRY): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_CreateGeometry".}

proc setGeometrySettings*(system: ptr FMOD_SYSTEM; maxworldsize: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetGeometrySettings".}

proc getGeometrySettings*(system: ptr FMOD_SYSTEM;
                                     maxworldsize: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetGeometrySettings".}

proc loadGeometry*(system: ptr FMOD_SYSTEM; data: pointer; datasize: cint;
                              geometry: ptr ptr FMOD_GEOMETRY): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_LoadGeometry".}

proc getGeometryOcclusion*(system: ptr FMOD_SYSTEM;
                                      listener: ptr FMOD_VECTOR;
                                      source: ptr FMOD_VECTOR; direct: ptr cfloat;
                                      reverb: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetGeometryOcclusion".}

proc setNetworkProxy*(system: ptr FMOD_SYSTEM; proxy: cstring): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetNetworkProxy".}

proc getNetworkProxy*(system: ptr FMOD_SYSTEM; proxy: cstring;
                                 proxylen: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetNetworkProxy".}

proc setNetworkTimeout*(system: ptr FMOD_SYSTEM; timeout: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetNetworkTimeout".}

proc getNetworkTimeout*(system: ptr FMOD_SYSTEM; timeout: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetNetworkTimeout".}

proc setUserData*(system: ptr FMOD_SYSTEM; userdata: pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_SetUserData".}

proc getUserData*(system: ptr FMOD_SYSTEM; userdata: ptr pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_System_GetUserData".}

proc release*(sound: ptr FMOD_SOUND): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_Release".}

proc getSystemObject*(sound: ptr FMOD_SOUND; system: ptr ptr FMOD_SYSTEM): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetSystemObject".}

proc lock*(sound: ptr FMOD_SOUND; offset: cuint; length: cuint;
                     ptr1: ptr pointer; ptr2: ptr pointer; len1: ptr cuint;
                     len2: ptr cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_Lock".}

proc unlock*(sound: ptr FMOD_SOUND; ptr1: pointer; ptr2: pointer;
                       len1: cuint; len2: cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_Unlock".}

proc setDefaults*(sound: ptr FMOD_SOUND; frequency: cfloat; priority: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_SetDefaults".}

proc getDefaults*(sound: ptr FMOD_SOUND; frequency: ptr cfloat;
                            priority: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetDefaults".}

proc set3DMinMaxDistance*(sound: ptr FMOD_SOUND; min: cfloat; max: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_Set3DMinMaxDistance".}

proc get3DMinMaxDistance*(sound: ptr FMOD_SOUND; min: ptr cfloat;
                                    max: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_Get3DMinMaxDistance".}

proc set3DConeSettings*(sound: ptr FMOD_SOUND; insideconeangle: cfloat;
                                  outsideconeangle: cfloat; outsidevolume: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_Set3DConeSettings".}

proc get3DConeSettings*(sound: ptr FMOD_SOUND;
                                  insideconeangle: ptr cfloat;
                                  outsideconeangle: ptr cfloat;
                                  outsidevolume: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_Get3DConeSettings".}

proc set3DCustomRolloff*(sound: ptr FMOD_SOUND; points: ptr FMOD_VECTOR;
                                   numpoints: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_Set3DCustomRolloff".}

proc get3DCustomRolloff*(sound: ptr FMOD_SOUND;
                                   points: ptr ptr FMOD_VECTOR; numpoints: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_Get3DCustomRolloff".}

proc getSubSound*(sound: ptr FMOD_SOUND; index: cint;
                            subsound: ptr ptr FMOD_SOUND): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetSubSound".}

proc getSubSoundParent*(sound: ptr FMOD_SOUND;
                                  parentsound: ptr ptr FMOD_SOUND): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetSubSoundParent".}

proc getName*(sound: ptr FMOD_SOUND; name: cstring; namelen: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetName".}

proc getLength*(sound: ptr FMOD_SOUND; length: ptr cuint;
                          lengthtype: FMOD_TIMEUNIT): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetLength".}

proc getFormat*(sound: ptr FMOD_SOUND; `type`: ptr FMOD_SOUND_TYPE;
                          format: ptr FMOD_SOUND_FORMAT; channels: ptr cint;
                          bits: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetFormat".}

proc getNumSubSounds*(sound: ptr FMOD_SOUND; numsubsounds: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetNumSubSounds".}

proc getNumTags*(sound: ptr FMOD_SOUND; numtags: ptr cint;
                           numtagsupdated: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetNumTags".}

proc getTag*(sound: ptr FMOD_SOUND; name: cstring; index: cint;
                       tag: ptr FMOD_TAG): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetTag".}

proc getOpenState*(sound: ptr FMOD_SOUND; openstate: ptr FMOD_OPENSTATE;
                             percentbuffered: ptr cuint; starving: ptr FMOD_BOOL;
                             diskbusy: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetOpenState".}

proc readData*(sound: ptr FMOD_SOUND; buffer: pointer; length: cuint;
                         read: ptr cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_ReadData".}

proc seekData*(sound: ptr FMOD_SOUND; pcm: cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_SeekData".}

proc setSoundGroup*(sound: ptr FMOD_SOUND;
                              soundgroup: ptr FMOD_SOUNDGROUP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_SetSoundGroup".}

proc getSoundGroup*(sound: ptr FMOD_SOUND;
                              soundgroup: ptr ptr FMOD_SOUNDGROUP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetSoundGroup".}

proc getNumSyncPoints*(sound: ptr FMOD_SOUND; numsyncpoints: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetNumSyncPoints".}

proc getSyncPoint*(sound: ptr FMOD_SOUND; index: cint;
                             point: ptr ptr FMOD_SYNCPOINT): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetSyncPoint".}

proc getSyncPointInfo*(sound: ptr FMOD_SOUND; point: ptr FMOD_SYNCPOINT;
                                 name: cstring; namelen: cint; offset: ptr cuint;
                                 offsettype: FMOD_TIMEUNIT): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetSyncPointInfo".}

proc addSyncPoint*(sound: ptr FMOD_SOUND; offset: cuint;
                             offsettype: FMOD_TIMEUNIT; name: cstring;
                             point: ptr ptr FMOD_SYNCPOINT): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_AddSyncPoint".}

proc deleteSyncPoint*(sound: ptr FMOD_SOUND; point: ptr FMOD_SYNCPOINT): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_DeleteSyncPoint".}

proc setMode*(sound: ptr FMOD_SOUND; mode: FMOD_MODE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_SetMode".}

proc getMode*(sound: ptr FMOD_SOUND; mode: ptr FMOD_MODE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetMode".}

proc setLoopCount*(sound: ptr FMOD_SOUND; loopcount: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_SetLoopCount".}

proc getLoopCount*(sound: ptr FMOD_SOUND; loopcount: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetLoopCount".}

proc setLoopPoints*(sound: ptr FMOD_SOUND; loopstart: cuint;
                              loopstarttype: FMOD_TIMEUNIT; loopend: cuint;
                              loopendtype: FMOD_TIMEUNIT): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_SetLoopPoints".}

proc getLoopPoints*(sound: ptr FMOD_SOUND; loopstart: ptr cuint;
                              loopstarttype: FMOD_TIMEUNIT; loopend: ptr cuint;
                              loopendtype: FMOD_TIMEUNIT): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetLoopPoints".}

proc getMusicNumChannels*(sound: ptr FMOD_SOUND; numchannels: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetMusicNumChannels".}

proc setMusicChannelVolume*(sound: ptr FMOD_SOUND; channel: cint;
                                      volume: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_SetMusicChannelVolume".}

proc getMusicChannelVolume*(sound: ptr FMOD_SOUND; channel: cint;
                                      volume: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetMusicChannelVolume".}

proc setMusicSpeed*(sound: ptr FMOD_SOUND; speed: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_SetMusicSpeed".}

proc getMusicSpeed*(sound: ptr FMOD_SOUND; speed: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetMusicSpeed".}

proc setUserData*(sound: ptr FMOD_SOUND; userdata: pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_SetUserData".}

proc getUserData*(sound: ptr FMOD_SOUND; userdata: ptr pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Sound_GetUserData".}

proc getSystemObject*(channel: ptr FMOD_CHANNEL;
                                  system: ptr ptr FMOD_SYSTEM): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetSystemObject".}

proc stop*(channel: ptr FMOD_CHANNEL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Stop".}

proc setPaused*(channel: ptr FMOD_CHANNEL; paused: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetPaused".}

proc getPaused*(channel: ptr FMOD_CHANNEL; paused: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetPaused".}

proc setVolume*(channel: ptr FMOD_CHANNEL; volume: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetVolume".}

proc getVolume*(channel: ptr FMOD_CHANNEL; volume: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetVolume".}

proc setVolumeRamp*(channel: ptr FMOD_CHANNEL; ramp: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetVolumeRamp".}

proc getVolumeRamp*(channel: ptr FMOD_CHANNEL; ramp: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetVolumeRamp".}

proc getAudibility*(channel: ptr FMOD_CHANNEL; audibility: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetAudibility".}

proc setPitch*(channel: ptr FMOD_CHANNEL; pitch: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetPitch".}

proc getPitch*(channel: ptr FMOD_CHANNEL; pitch: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetPitch".}

proc setMute*(channel: ptr FMOD_CHANNEL; mute: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetMute".}

proc getMute*(channel: ptr FMOD_CHANNEL; mute: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetMute".}

proc setReverbProperties*(channel: ptr FMOD_CHANNEL; instance: cint;
                                      wet: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetReverbProperties".}

proc getReverbProperties*(channel: ptr FMOD_CHANNEL; instance: cint;
                                      wet: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetReverbProperties".}

proc setLowPassGain*(channel: ptr FMOD_CHANNEL; gain: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetLowPassGain".}

proc getLowPassGain*(channel: ptr FMOD_CHANNEL; gain: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetLowPassGain".}

proc setMode*(channel: ptr FMOD_CHANNEL; mode: FMOD_MODE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetMode".}

proc getMode*(channel: ptr FMOD_CHANNEL; mode: ptr FMOD_MODE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetMode".}

proc setCallback*(channel: ptr FMOD_CHANNEL;
                              callback: FMOD_CHANNELCONTROL_CALLBACK): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetCallback".}

proc isPlaying*(channel: ptr FMOD_CHANNEL; isplaying: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_IsPlaying".}

proc setPan*(channel: ptr FMOD_CHANNEL; pan: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetPan".}

proc setMixLevelsOutput*(channel: ptr FMOD_CHANNEL; frontleft: cfloat;
                                     frontright: cfloat; center: cfloat;
                                     lfe: cfloat; surroundleft: cfloat;
                                     surroundright: cfloat; backleft: cfloat;
                                     backright: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetMixLevelsOutput".}

proc setMixLevelsInput*(channel: ptr FMOD_CHANNEL; levels: ptr cfloat;
                                    numlevels: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetMixLevelsInput".}

proc setMixMatrix*(channel: ptr FMOD_CHANNEL; matrix: ptr cfloat;
                               outchannels: cint; inchannels: cint;
                               inchannel_hop: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetMixMatrix".}

proc getMixMatrix*(channel: ptr FMOD_CHANNEL; matrix: ptr cfloat;
                               outchannels: ptr cint; inchannels: ptr cint;
                               inchannel_hop: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetMixMatrix".}

proc getDSPClock*(channel: ptr FMOD_CHANNEL; dspclock: ptr culonglong;
                              parentclock: ptr culonglong): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetDSPClock".}

proc setDelay*(channel: ptr FMOD_CHANNEL; dspclock_start: culonglong;
                           dspclock_end: culonglong; stopchannels: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetDelay".}

proc getDelay*(channel: ptr FMOD_CHANNEL;
                           dspclock_start: ptr culonglong;
                           dspclock_end: ptr culonglong;
                           stopchannels: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetDelay".}

proc addFadePoint*(channel: ptr FMOD_CHANNEL; dspclock: culonglong;
                               volume: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_AddFadePoint".}

proc setFadePointRamp*(channel: ptr FMOD_CHANNEL; dspclock: culonglong;
                                   volume: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetFadePointRamp".}

proc removeFadePoints*(channel: ptr FMOD_CHANNEL;
                                   dspclock_start: culonglong;
                                   dspclock_end: culonglong): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_RemoveFadePoints".}

proc getFadePoints*(channel: ptr FMOD_CHANNEL; numpoints: ptr cuint;
                                point_dspclock: ptr culonglong;
                                point_volume: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetFadePoints".}

proc getDSP*(channel: ptr FMOD_CHANNEL; index: cint;
                         dsp: ptr ptr FMOD_DSP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetDSP".}

proc addDSP*(channel: ptr FMOD_CHANNEL; index: cint; dsp: ptr FMOD_DSP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_AddDSP".}

proc removeDSP*(channel: ptr FMOD_CHANNEL; dsp: ptr FMOD_DSP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_RemoveDSP".}

proc getNumDSPs*(channel: ptr FMOD_CHANNEL; numdsps: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetNumDSPs".}

proc setDSPIndex*(channel: ptr FMOD_CHANNEL; dsp: ptr FMOD_DSP;
                              index: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetDSPIndex".}

proc getDSPIndex*(channel: ptr FMOD_CHANNEL; dsp: ptr FMOD_DSP;
                              index: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetDSPIndex".}

proc set3DAttributes*(channel: ptr FMOD_CHANNEL; pos: ptr FMOD_VECTOR;
                                  vel: ptr FMOD_VECTOR;
                                  alt_pan_pos: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Set3DAttributes".}

proc get3DAttributes*(channel: ptr FMOD_CHANNEL; pos: ptr FMOD_VECTOR;
                                  vel: ptr FMOD_VECTOR;
                                  alt_pan_pos: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Get3DAttributes".}

proc set3DMinMaxDistance*(channel: ptr FMOD_CHANNEL;
                                      mindistance: cfloat; maxdistance: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Set3DMinMaxDistance".}

proc get3DMinMaxDistance*(channel: ptr FMOD_CHANNEL;
                                      mindistance: ptr cfloat;
                                      maxdistance: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Get3DMinMaxDistance".}

proc set3DConeSettings*(channel: ptr FMOD_CHANNEL;
                                    insideconeangle: cfloat;
                                    outsideconeangle: cfloat;
                                    outsidevolume: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Set3DConeSettings".}

proc get3DConeSettings*(channel: ptr FMOD_CHANNEL;
                                    insideconeangle: ptr cfloat;
                                    outsideconeangle: ptr cfloat;
                                    outsidevolume: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Get3DConeSettings".}

proc set3DConeOrientation*(channel: ptr FMOD_CHANNEL;
                                       orientation: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Set3DConeOrientation".}

proc get3DConeOrientation*(channel: ptr FMOD_CHANNEL;
                                       orientation: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Get3DConeOrientation".}

proc set3DCustomRolloff*(channel: ptr FMOD_CHANNEL;
                                     points: ptr FMOD_VECTOR; numpoints: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Set3DCustomRolloff".}

proc get3DCustomRolloff*(channel: ptr FMOD_CHANNEL;
                                     points: ptr ptr FMOD_VECTOR;
                                     numpoints: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Get3DCustomRolloff".}

proc set3DOcclusion*(channel: ptr FMOD_CHANNEL;
                                 directocclusion: cfloat; reverbocclusion: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Set3DOcclusion".}

proc get3DOcclusion*(channel: ptr FMOD_CHANNEL;
                                 directocclusion: ptr cfloat;
                                 reverbocclusion: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Get3DOcclusion".}

proc set3DSpread*(channel: ptr FMOD_CHANNEL; angle: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Set3DSpread".}

proc get3DSpread*(channel: ptr FMOD_CHANNEL; angle: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Get3DSpread".}

proc set3DLevel*(channel: ptr FMOD_CHANNEL; level: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Set3DLevel".}

proc get3DLevel*(channel: ptr FMOD_CHANNEL; level: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Get3DLevel".}

proc set3DDopplerLevel*(channel: ptr FMOD_CHANNEL; level: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Set3DDopplerLevel".}

proc get3DDopplerLevel*(channel: ptr FMOD_CHANNEL; level: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Get3DDopplerLevel".}

proc set3DDistanceFilter*(channel: ptr FMOD_CHANNEL; custom: FMOD_BOOL;
                                      customLevel: cfloat; centerFreq: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Set3DDistanceFilter".}

proc get3DDistanceFilter*(channel: ptr FMOD_CHANNEL;
                                      custom: ptr FMOD_BOOL;
                                      customLevel: ptr cfloat;
                                      centerFreq: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_Get3DDistanceFilter".}

proc setUserData*(channel: ptr FMOD_CHANNEL; userdata: pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetUserData".}

proc getUserData*(channel: ptr FMOD_CHANNEL; userdata: ptr pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetUserData".}

proc setFrequency*(channel: ptr FMOD_CHANNEL; frequency: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetFrequency".}

proc getFrequency*(channel: ptr FMOD_CHANNEL; frequency: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetFrequency".}

proc setPriority*(channel: ptr FMOD_CHANNEL; priority: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetPriority".}

proc getPriority*(channel: ptr FMOD_CHANNEL; priority: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetPriority".}

proc setPosition*(channel: ptr FMOD_CHANNEL; position: cuint;
                              postype: FMOD_TIMEUNIT): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetPosition".}

proc getPosition*(channel: ptr FMOD_CHANNEL; position: ptr cuint;
                              postype: FMOD_TIMEUNIT): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetPosition".}

proc setChannelGroup*(channel: ptr FMOD_CHANNEL;
                                  channelgroup: ptr FMOD_CHANNELGROUP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetChannelGroup".}

proc getChannelGroup*(channel: ptr FMOD_CHANNEL;
                                  channelgroup: ptr ptr FMOD_CHANNELGROUP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetChannelGroup".}

proc setLoopCount*(channel: ptr FMOD_CHANNEL; loopcount: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetLoopCount".}

proc getLoopCount*(channel: ptr FMOD_CHANNEL; loopcount: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetLoopCount".}

proc setLoopPoints*(channel: ptr FMOD_CHANNEL; loopstart: cuint;
                                loopstarttype: FMOD_TIMEUNIT; loopend: cuint;
                                loopendtype: FMOD_TIMEUNIT): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_SetLoopPoints".}

proc getLoopPoints*(channel: ptr FMOD_CHANNEL; loopstart: ptr cuint;
                                loopstarttype: FMOD_TIMEUNIT; loopend: ptr cuint;
                                loopendtype: FMOD_TIMEUNIT): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetLoopPoints".}

proc isVirtual*(channel: ptr FMOD_CHANNEL; isvirtual: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_IsVirtual".}

proc getCurrentSound*(channel: ptr FMOD_CHANNEL;
                                  sound: ptr ptr FMOD_SOUND): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetCurrentSound".}

proc getIndex*(channel: ptr FMOD_CHANNEL; index: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Channel_GetIndex".}

proc getSystemObject*(channelgroup: ptr FMOD_CHANNELGROUP;
                                       system: ptr ptr FMOD_SYSTEM): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetSystemObject".}

proc stop*(channelgroup: ptr FMOD_CHANNELGROUP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Stop".}

proc setPaused*(channelgroup: ptr FMOD_CHANNELGROUP;
                                 paused: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetPaused".}

proc getPaused*(channelgroup: ptr FMOD_CHANNELGROUP;
                                 paused: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetPaused".}

proc setVolume*(channelgroup: ptr FMOD_CHANNELGROUP;
                                 volume: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetVolume".}

proc getVolume*(channelgroup: ptr FMOD_CHANNELGROUP;
                                 volume: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetVolume".}

proc setVolumeRamp*(channelgroup: ptr FMOD_CHANNELGROUP;
                                     ramp: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetVolumeRamp".}

proc getVolumeRamp*(channelgroup: ptr FMOD_CHANNELGROUP;
                                     ramp: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetVolumeRamp".}

proc getAudibility*(channelgroup: ptr FMOD_CHANNELGROUP;
                                     audibility: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetAudibility".}

proc setPitch*(channelgroup: ptr FMOD_CHANNELGROUP; pitch: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetPitch".}

proc getPitch*(channelgroup: ptr FMOD_CHANNELGROUP;
                                pitch: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetPitch".}

proc setMute*(channelgroup: ptr FMOD_CHANNELGROUP; mute: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetMute".}

proc getMute*(channelgroup: ptr FMOD_CHANNELGROUP;
                               mute: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetMute".}

proc setReverbProperties*(channelgroup: ptr FMOD_CHANNELGROUP;
    instance: cint; wet: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetReverbProperties".}

proc getReverbProperties*(channelgroup: ptr FMOD_CHANNELGROUP;
    instance: cint; wet: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetReverbProperties".}

proc setLowPassGain*(channelgroup: ptr FMOD_CHANNELGROUP;
                                      gain: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetLowPassGain".}

proc getLowPassGain*(channelgroup: ptr FMOD_CHANNELGROUP;
                                      gain: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetLowPassGain".}

proc setMode*(channelgroup: ptr FMOD_CHANNELGROUP; mode: FMOD_MODE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetMode".}

proc getMode*(channelgroup: ptr FMOD_CHANNELGROUP;
                               mode: ptr FMOD_MODE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetMode".}

proc setCallback*(channelgroup: ptr FMOD_CHANNELGROUP;
                                   callback: FMOD_CHANNELCONTROL_CALLBACK): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetCallback".}

proc isPlaying*(channelgroup: ptr FMOD_CHANNELGROUP;
                                 isplaying: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_IsPlaying".}

proc setPan*(channelgroup: ptr FMOD_CHANNELGROUP; pan: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetPan".}

proc setMixLevelsOutput*(channelgroup: ptr FMOD_CHANNELGROUP;
    frontleft: cfloat; frontright: cfloat; center: cfloat; lfe: cfloat;
    surroundleft: cfloat; surroundright: cfloat; backleft: cfloat; backright: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetMixLevelsOutput".}

proc setMixLevelsInput*(channelgroup: ptr FMOD_CHANNELGROUP;
    levels: ptr cfloat; numlevels: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetMixLevelsInput".}

proc setMixMatrix*(channelgroup: ptr FMOD_CHANNELGROUP;
                                    matrix: ptr cfloat; outchannels: cint;
                                    inchannels: cint; inchannel_hop: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetMixMatrix".}

proc getMixMatrix*(channelgroup: ptr FMOD_CHANNELGROUP;
                                    matrix: ptr cfloat; outchannels: ptr cint;
                                    inchannels: ptr cint; inchannel_hop: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetMixMatrix".}

proc getDSPClock*(channelgroup: ptr FMOD_CHANNELGROUP;
                                   dspclock: ptr culonglong;
                                   parentclock: ptr culonglong): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetDSPClock".}

proc setDelay*(channelgroup: ptr FMOD_CHANNELGROUP;
                                dspclock_start: culonglong;
                                dspclock_end: culonglong; stopchannels: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetDelay".}

proc getDelay*(channelgroup: ptr FMOD_CHANNELGROUP;
                                dspclock_start: ptr culonglong;
                                dspclock_end: ptr culonglong;
                                stopchannels: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetDelay".}

proc addFadePoint*(channelgroup: ptr FMOD_CHANNELGROUP;
                                    dspclock: culonglong; volume: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_AddFadePoint".}

proc setFadePointRamp*(channelgroup: ptr FMOD_CHANNELGROUP;
                                        dspclock: culonglong; volume: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetFadePointRamp".}

proc removeFadePoints*(channelgroup: ptr FMOD_CHANNELGROUP;
                                        dspclock_start: culonglong;
                                        dspclock_end: culonglong): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_RemoveFadePoints".}

proc getFadePoints*(channelgroup: ptr FMOD_CHANNELGROUP;
                                     numpoints: ptr cuint;
                                     point_dspclock: ptr culonglong;
                                     point_volume: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetFadePoints".}

proc getDSP*(channelgroup: ptr FMOD_CHANNELGROUP; index: cint;
                              dsp: ptr ptr FMOD_DSP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetDSP".}

proc addDSP*(channelgroup: ptr FMOD_CHANNELGROUP; index: cint;
                              dsp: ptr FMOD_DSP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_AddDSP".}

proc removeDSP*(channelgroup: ptr FMOD_CHANNELGROUP;
                                 dsp: ptr FMOD_DSP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_RemoveDSP".}

proc getNumDSPs*(channelgroup: ptr FMOD_CHANNELGROUP;
                                  numdsps: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetNumDSPs".}

proc setDSPIndex*(channelgroup: ptr FMOD_CHANNELGROUP;
                                   dsp: ptr FMOD_DSP; index: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetDSPIndex".}

proc getDSPIndex*(channelgroup: ptr FMOD_CHANNELGROUP;
                                   dsp: ptr FMOD_DSP; index: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetDSPIndex".}

proc set3DAttributes*(channelgroup: ptr FMOD_CHANNELGROUP;
                                       pos: ptr FMOD_VECTOR; vel: ptr FMOD_VECTOR;
                                       alt_pan_pos: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Set3DAttributes".}

proc get3DAttributes*(channelgroup: ptr FMOD_CHANNELGROUP;
                                       pos: ptr FMOD_VECTOR; vel: ptr FMOD_VECTOR;
                                       alt_pan_pos: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Get3DAttributes".}

proc set3DMinMaxDistance*(channelgroup: ptr FMOD_CHANNELGROUP;
    mindistance: cfloat; maxdistance: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Set3DMinMaxDistance".}

proc get3DMinMaxDistance*(channelgroup: ptr FMOD_CHANNELGROUP;
    mindistance: ptr cfloat; maxdistance: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Get3DMinMaxDistance".}

proc set3DConeSettings*(channelgroup: ptr FMOD_CHANNELGROUP;
    insideconeangle: cfloat; outsideconeangle: cfloat; outsidevolume: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Set3DConeSettings".}

proc get3DConeSettings*(channelgroup: ptr FMOD_CHANNELGROUP;
    insideconeangle: ptr cfloat; outsideconeangle: ptr cfloat;
    outsidevolume: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Get3DConeSettings".}

proc set3DConeOrientation*(channelgroup: ptr FMOD_CHANNELGROUP;
    orientation: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Set3DConeOrientation".}

proc get3DConeOrientation*(channelgroup: ptr FMOD_CHANNELGROUP;
    orientation: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Get3DConeOrientation".}

proc set3DCustomRolloff*(channelgroup: ptr FMOD_CHANNELGROUP;
    points: ptr FMOD_VECTOR; numpoints: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Set3DCustomRolloff".}

proc get3DCustomRolloff*(channelgroup: ptr FMOD_CHANNELGROUP;
    points: ptr ptr FMOD_VECTOR; numpoints: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Get3DCustomRolloff".}

proc set3DOcclusion*(channelgroup: ptr FMOD_CHANNELGROUP;
                                      directocclusion: cfloat;
                                      reverbocclusion: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Set3DOcclusion".}

proc get3DOcclusion*(channelgroup: ptr FMOD_CHANNELGROUP;
                                      directocclusion: ptr cfloat;
                                      reverbocclusion: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Get3DOcclusion".}

proc set3DSpread*(channelgroup: ptr FMOD_CHANNELGROUP;
                                   angle: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Set3DSpread".}

proc get3DSpread*(channelgroup: ptr FMOD_CHANNELGROUP;
                                   angle: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Get3DSpread".}

proc set3DLevel*(channelgroup: ptr FMOD_CHANNELGROUP;
                                  level: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Set3DLevel".}

proc get3DLevel*(channelgroup: ptr FMOD_CHANNELGROUP;
                                  level: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Get3DLevel".}

proc set3DDopplerLevel*(channelgroup: ptr FMOD_CHANNELGROUP;
    level: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Set3DDopplerLevel".}

proc get3DDopplerLevel*(channelgroup: ptr FMOD_CHANNELGROUP;
    level: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Get3DDopplerLevel".}

proc set3DDistanceFilter*(channelgroup: ptr FMOD_CHANNELGROUP;
    custom: FMOD_BOOL; customLevel: cfloat; centerFreq: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Set3DDistanceFilter".}

proc get3DDistanceFilter*(channelgroup: ptr FMOD_CHANNELGROUP;
    custom: ptr FMOD_BOOL; customLevel: ptr cfloat; centerFreq: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Get3DDistanceFilter".}

proc setUserData*(channelgroup: ptr FMOD_CHANNELGROUP;
                                   userdata: pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_SetUserData".}

proc getUserData*(channelgroup: ptr FMOD_CHANNELGROUP;
                                   userdata: ptr pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetUserData".}

proc release*(channelgroup: ptr FMOD_CHANNELGROUP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_Release".}

proc addGroup*(channelgroup: ptr FMOD_CHANNELGROUP;
                                group: ptr FMOD_CHANNELGROUP;
                                propagatedspclock: FMOD_BOOL;
                                connection: ptr ptr FMOD_DSPCONNECTION): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_AddGroup".}

proc getNumGroups*(channelgroup: ptr FMOD_CHANNELGROUP;
                                    numgroups: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetNumGroups".}

proc getGroup*(channelgroup: ptr FMOD_CHANNELGROUP; index: cint;
                                group: ptr ptr FMOD_CHANNELGROUP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetGroup".}

proc getParentGroup*(channelgroup: ptr FMOD_CHANNELGROUP;
                                      group: ptr ptr FMOD_CHANNELGROUP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetParentGroup".}

proc getName*(channelgroup: ptr FMOD_CHANNELGROUP; name: cstring;
                               namelen: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetName".}

proc getNumChannels*(channelgroup: ptr FMOD_CHANNELGROUP;
                                      numchannels: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetNumChannels".}

proc getChannel*(channelgroup: ptr FMOD_CHANNELGROUP; index: cint;
                                  channel: ptr ptr FMOD_CHANNEL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_ChannelGroup_GetChannel".}

proc release*(soundgroup: ptr FMOD_SOUNDGROUP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_Release".}

proc getSystemObject*(soundgroup: ptr FMOD_SOUNDGROUP;
                                     system: ptr ptr FMOD_SYSTEM): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_GetSystemObject".}

proc setMaxAudible*(soundgroup: ptr FMOD_SOUNDGROUP;
                                   maxaudible: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_SetMaxAudible".}

proc getMaxAudible*(soundgroup: ptr FMOD_SOUNDGROUP;
                                   maxaudible: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_GetMaxAudible".}

proc setMaxAudibleBehavior*(soundgroup: ptr FMOD_SOUNDGROUP;
    behavior: FMOD_SOUNDGROUP_BEHAVIOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_SetMaxAudibleBehavior".}

proc getMaxAudibleBehavior*(soundgroup: ptr FMOD_SOUNDGROUP;
    behavior: ptr FMOD_SOUNDGROUP_BEHAVIOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_GetMaxAudibleBehavior".}

proc setMuteFadeSpeed*(soundgroup: ptr FMOD_SOUNDGROUP;
                                      speed: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_SetMuteFadeSpeed".}

proc getMuteFadeSpeed*(soundgroup: ptr FMOD_SOUNDGROUP;
                                      speed: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_GetMuteFadeSpeed".}

proc setVolume*(soundgroup: ptr FMOD_SOUNDGROUP; volume: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_SetVolume".}

proc getVolume*(soundgroup: ptr FMOD_SOUNDGROUP; volume: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_GetVolume".}

proc stop*(soundgroup: ptr FMOD_SOUNDGROUP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_Stop".}

proc getName*(soundgroup: ptr FMOD_SOUNDGROUP; name: cstring;
                             namelen: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_GetName".}

proc getNumSounds*(soundgroup: ptr FMOD_SOUNDGROUP;
                                  numsounds: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_GetNumSounds".}

proc getSound*(soundgroup: ptr FMOD_SOUNDGROUP; index: cint;
                              sound: ptr ptr FMOD_SOUND): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_GetSound".}

proc getNumPlaying*(soundgroup: ptr FMOD_SOUNDGROUP;
                                   numplaying: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_GetNumPlaying".}

proc setUserData*(soundgroup: ptr FMOD_SOUNDGROUP; userdata: pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_SetUserData".}

proc getUserData*(soundgroup: ptr FMOD_SOUNDGROUP;
                                 userdata: ptr pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_SoundGroup_GetUserData".}

proc release*(dsp: ptr FMOD_DSP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_Release".}

proc getSystemObject*(dsp: ptr FMOD_DSP; system: ptr ptr FMOD_SYSTEM): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetSystemObject".}

proc addInput*(dsp: ptr FMOD_DSP; input: ptr FMOD_DSP;
                       connection: ptr ptr FMOD_DSPCONNECTION;
                       `type`: FMOD_DSPCONNECTION_TYPE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_AddInput".}

proc disconnectFrom*(dsp: ptr FMOD_DSP; target: ptr FMOD_DSP;
                             connection: ptr FMOD_DSPCONNECTION): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_DisconnectFrom".}

proc disconnectAll*(dsp: ptr FMOD_DSP; inputs: FMOD_BOOL; outputs: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_DisconnectAll".}

proc getNumInputs*(dsp: ptr FMOD_DSP; numinputs: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetNumInputs".}

proc getNumOutputs*(dsp: ptr FMOD_DSP; numoutputs: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetNumOutputs".}

proc getInput*(dsp: ptr FMOD_DSP; index: cint; input: ptr ptr FMOD_DSP;
                       inputconnection: ptr ptr FMOD_DSPCONNECTION): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetInput".}

proc getOutput*(dsp: ptr FMOD_DSP; index: cint; output: ptr ptr FMOD_DSP;
                        outputconnection: ptr ptr FMOD_DSPCONNECTION): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetOutput".}

proc setActive*(dsp: ptr FMOD_DSP; active: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_SetActive".}

proc getActive*(dsp: ptr FMOD_DSP; active: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetActive".}

proc setBypass*(dsp: ptr FMOD_DSP; bypass: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_SetBypass".}

proc getBypass*(dsp: ptr FMOD_DSP; bypass: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetBypass".}

proc setWetDryMix*(dsp: ptr FMOD_DSP; prewet: cfloat; postwet: cfloat;
                           dry: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_SetWetDryMix".}

proc getWetDryMix*(dsp: ptr FMOD_DSP; prewet: ptr cfloat; postwet: ptr cfloat;
                           dry: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetWetDryMix".}

proc setChannelFormat*(dsp: ptr FMOD_DSP; channelmask: FMOD_CHANNELMASK;
                               numchannels: cint;
                               source_speakermode: FMOD_SPEAKERMODE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_SetChannelFormat".}

proc getChannelFormat*(dsp: ptr FMOD_DSP;
                               channelmask: ptr FMOD_CHANNELMASK;
                               numchannels: ptr cint;
                               source_speakermode: ptr FMOD_SPEAKERMODE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetChannelFormat".}

proc getOutputChannelFormat*(dsp: ptr FMOD_DSP; inmask: FMOD_CHANNELMASK;
                                     inchannels: cint;
                                     inspeakermode: FMOD_SPEAKERMODE;
                                     outmask: ptr FMOD_CHANNELMASK;
                                     outchannels: ptr cint;
                                     outspeakermode: ptr FMOD_SPEAKERMODE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetOutputChannelFormat".}

proc reset*(dsp: ptr FMOD_DSP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_Reset".}

proc setParameterFloat*(dsp: ptr FMOD_DSP; index: cint; value: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_SetParameterFloat".}

proc setParameterInt*(dsp: ptr FMOD_DSP; index: cint; value: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_SetParameterInt".}

proc setParameterBool*(dsp: ptr FMOD_DSP; index: cint; value: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_SetParameterBool".}

proc setParameterData*(dsp: ptr FMOD_DSP; index: cint; data: pointer;
                               length: cuint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_SetParameterData".}

proc getParameterFloat*(dsp: ptr FMOD_DSP; index: cint; value: ptr cfloat;
                                valuestr: cstring; valuestrlen: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetParameterFloat".}

proc getParameterInt*(dsp: ptr FMOD_DSP; index: cint; value: ptr cint;
                              valuestr: cstring; valuestrlen: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetParameterInt".}

proc getParameterBool*(dsp: ptr FMOD_DSP; index: cint; value: ptr FMOD_BOOL;
                               valuestr: cstring; valuestrlen: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetParameterBool".}

proc getParameterData*(dsp: ptr FMOD_DSP; index: cint; data: ptr pointer;
                               length: ptr cuint; valuestr: cstring;
                               valuestrlen: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetParameterData".}

proc getNumParameters*(dsp: ptr FMOD_DSP; numparams: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetNumParameters".}

proc getParameterInfo*(dsp: ptr FMOD_DSP; index: cint;
                               desc: ptr ptr FMOD_DSP_PARAMETER_DESC): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetParameterInfo".}

proc getDataParameterIndex*(dsp: ptr FMOD_DSP; datatype: cint;
                                    index: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetDataParameterIndex".}

proc showConfigDialog*(dsp: ptr FMOD_DSP; hwnd: pointer; show: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_ShowConfigDialog".}

proc getInfo*(dsp: ptr FMOD_DSP; name: cstring; version: ptr cuint;
                      channels: ptr cint; configwidth: ptr cint;
                      configheight: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetInfo".}

proc getType*(dsp: ptr FMOD_DSP; `type`: ptr FMOD_DSP_TYPE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetType".}

proc getIdle*(dsp: ptr FMOD_DSP; idle: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetIdle".}

proc setUserData*(dsp: ptr FMOD_DSP; userdata: pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_SetUserData".}

proc getUserData*(dsp: ptr FMOD_DSP; userdata: ptr pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetUserData".}

proc setMeteringEnabled*(dsp: ptr FMOD_DSP; inputEnabled: FMOD_BOOL;
                                 outputEnabled: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_SetMeteringEnabled".}

proc getMeteringEnabled*(dsp: ptr FMOD_DSP; inputEnabled: ptr FMOD_BOOL;
                                 outputEnabled: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetMeteringEnabled".}

proc getMeteringInfo*(dsp: ptr FMOD_DSP;
                              inputInfo: ptr FMOD_DSP_METERING_INFO;
                              outputInfo: ptr FMOD_DSP_METERING_INFO): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSP_GetMeteringInfo".}

proc getInput*(dspconnection: ptr FMOD_DSPCONNECTION;
                                 input: ptr ptr FMOD_DSP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSPConnection_GetInput".}

proc getOutput*(dspconnection: ptr FMOD_DSPCONNECTION;
                                  output: ptr ptr FMOD_DSP): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSPConnection_GetOutput".}

proc setMix*(dspconnection: ptr FMOD_DSPCONNECTION;
                               volume: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSPConnection_SetMix".}

proc getMix*(dspconnection: ptr FMOD_DSPCONNECTION;
                               volume: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSPConnection_GetMix".}

proc setMixMatrix*(dspconnection: ptr FMOD_DSPCONNECTION;
                                     matrix: ptr cfloat; outchannels: cint;
                                     inchannels: cint; inchannel_hop: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSPConnection_SetMixMatrix".}

proc getMixMatrix*(dspconnection: ptr FMOD_DSPCONNECTION;
                                     matrix: ptr cfloat; outchannels: ptr cint;
                                     inchannels: ptr cint; inchannel_hop: cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSPConnection_GetMixMatrix".}

proc getType*(dspconnection: ptr FMOD_DSPCONNECTION;
                                `type`: ptr FMOD_DSPCONNECTION_TYPE): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSPConnection_GetType".}

proc setUserData*(dspconnection: ptr FMOD_DSPCONNECTION;
                                    userdata: pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSPConnection_SetUserData".}

proc getUserData*(dspconnection: ptr FMOD_DSPCONNECTION;
                                    userdata: ptr pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_DSPConnection_GetUserData".}

proc release*(geometry: ptr FMOD_GEOMETRY): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_Release".}

proc addPolygon*(geometry: ptr FMOD_GEOMETRY; directocclusion: cfloat;
                              reverbocclusion: cfloat; doublesided: FMOD_BOOL;
                              numvertices: cint; vertices: ptr FMOD_VECTOR;
                              polygonindex: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_AddPolygon".}

proc getNumPolygons*(geometry: ptr FMOD_GEOMETRY;
                                  numpolygons: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_GetNumPolygons".}

proc getMaxPolygons*(geometry: ptr FMOD_GEOMETRY;
                                  maxpolygons: ptr cint; maxvertices: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_GetMaxPolygons".}

proc getPolygonNumVertices*(geometry: ptr FMOD_GEOMETRY; index: cint;
    numvertices: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_GetPolygonNumVertices".}

proc setPolygonVertex*(geometry: ptr FMOD_GEOMETRY; index: cint;
                                    vertexindex: cint; vertex: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_SetPolygonVertex".}

proc getPolygonVertex*(geometry: ptr FMOD_GEOMETRY; index: cint;
                                    vertexindex: cint; vertex: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_GetPolygonVertex".}

proc setPolygonAttributes*(geometry: ptr FMOD_GEOMETRY; index: cint;
                                        directocclusion: cfloat;
                                        reverbocclusion: cfloat;
                                        doublesided: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_SetPolygonAttributes".}

proc getPolygonAttributes*(geometry: ptr FMOD_GEOMETRY; index: cint;
                                        directocclusion: ptr cfloat;
                                        reverbocclusion: ptr cfloat;
                                        doublesided: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_GetPolygonAttributes".}

proc setActive*(geometry: ptr FMOD_GEOMETRY; active: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_SetActive".}

proc getActive*(geometry: ptr FMOD_GEOMETRY; active: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_GetActive".}

proc setRotation*(geometry: ptr FMOD_GEOMETRY;
                               forward: ptr FMOD_VECTOR; up: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_SetRotation".}

proc getRotation*(geometry: ptr FMOD_GEOMETRY;
                               forward: ptr FMOD_VECTOR; up: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_GetRotation".}

proc setPosition*(geometry: ptr FMOD_GEOMETRY;
                               position: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_SetPosition".}

proc getPosition*(geometry: ptr FMOD_GEOMETRY;
                               position: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_GetPosition".}

proc setScale*(geometry: ptr FMOD_GEOMETRY; scale: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_SetScale".}

proc getScale*(geometry: ptr FMOD_GEOMETRY; scale: ptr FMOD_VECTOR): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_GetScale".}

proc save*(geometry: ptr FMOD_GEOMETRY; data: pointer;
                        datasize: ptr cint): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_Save".}

proc setUserData*(geometry: ptr FMOD_GEOMETRY; userdata: pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_SetUserData".}

proc getUserData*(geometry: ptr FMOD_GEOMETRY; userdata: ptr pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Geometry_GetUserData".}

proc release*(reverb3d: ptr FMOD_REVERB3D): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Reverb3D_Release".}

proc set3DAttributes*(reverb3d: ptr FMOD_REVERB3D;
                                   position: ptr FMOD_VECTOR; mindistance: cfloat;
                                   maxdistance: cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Reverb3D_Set3DAttributes".}

proc get3DAttributes*(reverb3d: ptr FMOD_REVERB3D;
                                   position: ptr FMOD_VECTOR;
                                   mindistance: ptr cfloat; maxdistance: ptr cfloat): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Reverb3D_Get3DAttributes".}

proc setProperties*(reverb3d: ptr FMOD_REVERB3D;
                                 properties: ptr FMOD_REVERB_PROPERTIES): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Reverb3D_SetProperties".}

proc getProperties*(reverb3d: ptr FMOD_REVERB3D;
                                 properties: ptr FMOD_REVERB_PROPERTIES): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Reverb3D_GetProperties".}

proc setActive*(reverb3d: ptr FMOD_REVERB3D; active: FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Reverb3D_SetActive".}

proc getActive*(reverb3d: ptr FMOD_REVERB3D; active: ptr FMOD_BOOL): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Reverb3D_GetActive".}

proc setUserData*(reverb3d: ptr FMOD_REVERB3D; userdata: pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Reverb3D_SetUserData".}

proc getUserData*(reverb3d: ptr FMOD_REVERB3D; userdata: ptr pointer): FMOD_RESULT {.fmodImport, cdecl, importc: "FMOD_Reverb3D_GetUserData".}


proc FMOD_ErrorString*(errcode: FMOD_RESULT): string =
  case errcode:
    of FMOD_OK:                            result = "No errors."
    of FMOD_ERR_BADCOMMAND:                result = "Tried to call a function on a data type that does not allow this type of functionality (ie calling Sound::lock on a streaming sound)."
    of FMOD_ERR_CHANNEL_ALLOC:             result = "Error trying to allocate a channel."
    of FMOD_ERR_CHANNEL_STOLEN:            result = "The specified channel has been reused to play another sound."
    of FMOD_ERR_DMA:                       result = "DMA Failure.  See debug output for more information."
    of FMOD_ERR_DSP_CONNECTION:            result = "DSP connection error.  Connection possibly caused a cyclic dependency or connected dsps with incompatible buffer counts."
    of FMOD_ERR_DSP_DONTPROCESS:           result = "DSP return code from a DSP process query callback.  Tells mixer not to call the process callback and therefore not consume CPU.  Use this to optimize the DSP graph."
    of FMOD_ERR_DSP_FORMAT:                result = "DSP Format error.  A DSP unit may have attempted to connect to this network with the wrong format, or a matrix may have been set with the wrong size if the target unit has a specified channel map."
    of FMOD_ERR_DSP_INUSE:                 result = "DSP is already in the mixer's DSP network. It must be removed before being reinserted or released."
    of FMOD_ERR_DSP_NOTFOUND:              result = "DSP connection error.  Couldn't find the DSP unit specified."
    of FMOD_ERR_DSP_RESERVED:              result = "DSP operation error.  Cannot perform operation on this DSP as it is reserved by the system."
    of FMOD_ERR_DSP_SILENCE:               result = "DSP return code from a DSP process query callback.  Tells mixer silence would be produced from read, so go idle and not consume CPU.  Use this to optimize the DSP graph."
    of FMOD_ERR_DSP_TYPE:                  result = "DSP operation cannot be performed on a DSP of this type."
    of FMOD_ERR_FILE_BAD:                  result = "Error loading file."
    of FMOD_ERR_FILE_COULDNOTSEEK:         result = "Couldn't perform seek operation.  This is a limitation of the medium (ie netstreams) or the file format."
    of FMOD_ERR_FILE_DISKEJECTED:          result = "Media was ejected while reading."
    of FMOD_ERR_FILE_EOF:                  result = "End of file unexpectedly reached while trying to read essential data (truncated?)."
    of FMOD_ERR_FILE_ENDOFDATA:            result = "End of current chunk reached while trying to read data."
    of FMOD_ERR_FILE_NOTFOUND:             result = "File not found."
    of FMOD_ERR_FORMAT:                    result = "Unsupported file or audio format."
    of FMOD_ERR_HEADER_MISMATCH:           result = "There is a version mismatch between the FMOD header and either the FMOD Studio library or the FMOD Low Level library."
    of FMOD_ERR_HTTP:                      result = "A HTTP error occurred. This is a catch-all for HTTP errors not listed elsewhere."
    of FMOD_ERR_HTTP_ACCESS:               result = "The specified resource requires authentication or is forbidden."
    of FMOD_ERR_HTTP_PROXY_AUTH:           result = "Proxy authentication is required to access the specified resource."
    of FMOD_ERR_HTTP_SERVER_ERROR:         result = "A HTTP server error occurred."
    of FMOD_ERR_HTTP_TIMEOUT:              result = "The HTTP request timed out."
    of FMOD_ERR_INITIALIZATION:            result = "FMOD was not initialized correctly to support this function."
    of FMOD_ERR_INITIALIZED:               result = "Cannot call this command after System::init."
    of FMOD_ERR_INTERNAL:                  result = "An error occurred that wasn't supposed to.  Contact support."
    of FMOD_ERR_INVALID_FLOAT:             result = "Value passed in was a NaN, Inf or denormalized float."
    of FMOD_ERR_INVALID_HANDLE:            result = "An invalid object handle was used."
    of FMOD_ERR_INVALID_PARAM:             result = "An invalid parameter was passed to this function."
    of FMOD_ERR_INVALID_POSITION:          result = "An invalid seek position was passed to this function."
    of FMOD_ERR_INVALID_SPEAKER:           result = "An invalid speaker was passed to this function based on the current speaker mode."
    of FMOD_ERR_INVALID_SYNCPOINT:         result = "The syncpoint did not come from this sound handle."
    of FMOD_ERR_INVALID_THREAD:            result = "Tried to call a function on a thread that is not supported."
    of FMOD_ERR_INVALID_VECTOR:            result = "The vectors passed in are not unit length, or perpendicular."
    of FMOD_ERR_MAXAUDIBLE:                result = "Reached maximum audible playback count for this sound's soundgroup."
    of FMOD_ERR_MEMORY:                    result = "Not enough memory or resources."
    of FMOD_ERR_MEMORY_CANTPOINT:          result = "Can't use FMOD_OPENMEMORY_POINT on non PCM source data, or non mp3/xma/adpcm data if FMOD_CREATECOMPRESSEDSAMPLE was used."
    of FMOD_ERR_NEEDS3D:                   result = "Tried to call a command on a 2d sound when the command was meant for 3d sound."
    of FMOD_ERR_NEEDSHARDWARE:             result = "Tried to use a feature that requires hardware support."
    of FMOD_ERR_NET_CONNECT:               result = "Couldn't connect to the specified host."
    of FMOD_ERR_NET_SOCKET_ERROR:          result = "A socket error occurred.  This is a catch-all for socket-related errors not listed elsewhere."
    of FMOD_ERR_NET_URL:                   result = "The specified URL couldn't be resolved."
    of FMOD_ERR_NET_WOULD_BLOCK:           result = "Operation on a non-blocking socket could not complete immediately."
    of FMOD_ERR_NOTREADY:                  result = "Operation could not be performed because specified sound/DSP connection is not ready."
    of FMOD_ERR_OUTPUT_ALLOCATED:          result = "Error initializing output device, but more specifically, the output device is already in use and cannot be reused."
    of FMOD_ERR_OUTPUT_CREATEBUFFER:       result = "Error creating hardware sound buffer."
    of FMOD_ERR_OUTPUT_DRIVERCALL:         result = "A call to a standard soundcard driver failed, which could possibly mean a bug in the driver or resources were missing or exhausted."
    of FMOD_ERR_OUTPUT_FORMAT:             result = "Soundcard does not support the specified format."
    of FMOD_ERR_OUTPUT_INIT:               result = "Error initializing output device."
    of FMOD_ERR_OUTPUT_NODRIVERS:          result = "The output device has no drivers installed.  If pre-init, FMOD_OUTPUT_NOSOUND is selected as the output mode.  If post-init, the function just fails."
    of FMOD_ERR_PLUGIN:                    result = "An unspecified error has been returned from a plugin."
    of FMOD_ERR_PLUGIN_MISSING:            result = "A requested output, dsp unit type or codec was not available."
    of FMOD_ERR_PLUGIN_RESOURCE:           result = "A resource that the plugin requires cannot be found. (ie the DLS file for MIDI playback)"
    of FMOD_ERR_PLUGIN_VERSION:            result = "A plugin was built with an unsupported SDK version."
    of FMOD_ERR_RECORD:                    result = "An error occurred trying to initialize the recording device."
    of FMOD_ERR_REVERB_CHANNELGROUP:       result = "Reverb properties cannot be set on this channel because a parent channelgroup owns the reverb connection."
    of FMOD_ERR_REVERB_INSTANCE:           result = "Specified instance in FMOD_REVERB_PROPERTIES couldn't be set. Most likely because it is an invalid instance number or the reverb doesn't exist."
    of FMOD_ERR_SUBSOUNDS:                 result = "The error occurred because the sound referenced contains subsounds when it shouldn't have, or it doesn't contain subsounds when it should have.  The operation may also not be able to be performed on a parent sound."
    of FMOD_ERR_SUBSOUND_ALLOCATED:        result = "This subsound is already being used by another sound, you cannot have more than one parent to a sound.  Null out the other parent's entry first."
    of FMOD_ERR_SUBSOUND_CANTMOVE:         result = "Shared subsounds cannot be replaced or moved from their parent stream, such as when the parent stream is an FSB file."
    of FMOD_ERR_TAGNOTFOUND:               result = "The specified tag could not be found or there are no tags."
    of FMOD_ERR_TOOMANYCHANNELS:           result = "The sound created exceeds the allowable input channel count.  This can be increased using the 'maxinputchannels' parameter in System::setSoftwareFormat."
    of FMOD_ERR_TRUNCATED:                 result = "The retrieved string is too long to fit in the supplied buffer and has been truncated."
    of FMOD_ERR_UNIMPLEMENTED:             result = "Something in FMOD hasn't been implemented when it should be! contact support!"
    of FMOD_ERR_UNINITIALIZED:             result = "This command failed because System::init or System::setDriver was not called."
    of FMOD_ERR_UNSUPPORTED:               result = "A command issued was not supported by this object.  Possibly a plugin without certain callbacks specified."
    of FMOD_ERR_VERSION:                   result = "The version number of this file format is not supported."
    of FMOD_ERR_EVENT_ALREADY_LOADED:      result = "The specified bank has already been loaded."
    of FMOD_ERR_EVENT_LIVEUPDATE_BUSY:     result = "The live update connection failed due to the game already being connected."
    of FMOD_ERR_EVENT_LIVEUPDATE_MISMATCH: result = "The live update connection failed due to the game data being out of sync with the tool."
    of FMOD_ERR_EVENT_LIVEUPDATE_TIMEOUT:  result = "The live update connection timed out."
    of FMOD_ERR_EVENT_NOTFOUND:            result = "The requested event, bus or vca could not be found."
    of FMOD_ERR_STUDIO_UNINITIALIZED:      result = "The Studio::System object is not yet initialized."
    of FMOD_ERR_STUDIO_NOT_LOADED:         result = "The specified resource is not loaded, so it can't be unloaded."
    of FMOD_ERR_INVALID_STRING:            result = "An invalid string was passed to this function."
    of FMOD_ERR_ALREADY_LOCKED:            result = "The specified resource is already locked."
    of FMOD_ERR_NOT_LOCKED:                result = "The specified resource is not locked, so it can't be unlocked."
    of FMOD_ERR_RECORD_DISCONNECTED:       result = "The specified recording driver has been disconnected."
    of FMOD_ERR_TOOMANYSAMPLES:            result = "The length provided exceeds the allowable limit."
    else:                                  result = "Unknown error."


let
  FMOD_VERSION* = 0x00011006

  FMOD_DEBUG_LEVEL_NONE*: FMOD_DEBUG_FLAGS = 0x00000000
  FMOD_DEBUG_LEVEL_ERROR*: FMOD_DEBUG_FLAGS = 0x00000001
  FMOD_DEBUG_LEVEL_WARNING*: FMOD_DEBUG_FLAGS = 0x00000002
  FMOD_DEBUG_LEVEL_LOG*: FMOD_DEBUG_FLAGS = 0x00000004
  FMOD_DEBUG_TYPE_MEMORY*: FMOD_DEBUG_FLAGS = 0x00000100
  FMOD_DEBUG_TYPE_FILE*: FMOD_DEBUG_FLAGS = 0x00000200
  FMOD_DEBUG_TYPE_CODEC*: FMOD_DEBUG_FLAGS = 0x00000400
  FMOD_DEBUG_TYPE_TRACE*: FMOD_DEBUG_FLAGS = 0x00000800
  FMOD_DEBUG_DISPLAY_TIMESTAMPS*: FMOD_DEBUG_FLAGS = 0x00010000
  FMOD_DEBUG_DISPLAY_LINENUMBERS*: FMOD_DEBUG_FLAGS = 0x00020000
  FMOD_DEBUG_DISPLAY_THREAD*: FMOD_DEBUG_FLAGS = 0x00040000

  FMOD_MEMORY_NORMAL*: FMOD_MEMORY_TYPE = 0x00000000
  FMOD_MEMORY_STREAM_FILE*: FMOD_MEMORY_TYPE = 0x00000001
  FMOD_MEMORY_STREAM_DECODE*: FMOD_MEMORY_TYPE = 0x00000002
  FMOD_MEMORY_SAMPLEDATA*: FMOD_MEMORY_TYPE = 0x00000004
  FMOD_MEMORY_DSP_BUFFER*: FMOD_MEMORY_TYPE = 0x00000008
  FMOD_MEMORY_PLUGIN*: FMOD_MEMORY_TYPE = 0x00000010
  FMOD_MEMORY_XBOX360_PHYSICAL*: FMOD_MEMORY_TYPE = 0x00100000
  FMOD_MEMORY_PERSISTENT*: FMOD_MEMORY_TYPE = 0x00200000
  FMOD_MEMORY_SECONDARY*: FMOD_MEMORY_TYPE = 0x00400000
  FMOD_MEMORY_ALL*: FMOD_MEMORY_TYPE = 0xFFFFFFFF'u32

  FMOD_INIT_NORMAL*: FMOD_INITFLAGS = 0x00000000
  FMOD_INIT_STREAM_FROM_UPDATE*: FMOD_INITFLAGS = 0x00000001
  FMOD_INIT_MIX_FROM_UPDATE*: FMOD_INITFLAGS = 0x00000002
  FMOD_INIT_3D_RIGHTHANDED*: FMOD_INITFLAGS = 0x00000004
  FMOD_INIT_CHANNEL_LOWPASS*: FMOD_INITFLAGS = 0x00000100
  FMOD_INIT_CHANNEL_DISTANCEFILTER*: FMOD_INITFLAGS = 0x00000200
  FMOD_INIT_PROFILE_ENABLE*: FMOD_INITFLAGS = 0x00010000
  FMOD_INIT_VOL0_BECOMES_VIRTUAL*: FMOD_INITFLAGS = 0x00020000
  FMOD_INIT_GEOMETRY_USECLOSEST*: FMOD_INITFLAGS = 0x00040000
  FMOD_INIT_PREFER_DOLBY_DOWNMIX*: FMOD_INITFLAGS = 0x00080000
  FMOD_INIT_THREAD_UNSAFE*: FMOD_INITFLAGS = 0x00100000
  FMOD_INIT_PROFILE_METER_ALL*: FMOD_INITFLAGS = 0x00200000
  FMOD_INIT_DISABLE_SRS_HIGHPASSFILTER*: FMOD_INITFLAGS = 0x00400000

  FMOD_MAX_CHANNEL_WIDTH* = 32
  FMOD_MAX_SYSTEMS* = 8
  FMOD_MAX_LISTENERS* = 8

  FMOD_CHANNELMASK_FRONT_LEFT*: FMOD_CHANNELMASK = 0x00000001
  FMOD_CHANNELMASK_FRONT_RIGHT*: FMOD_CHANNELMASK = 0x00000002
  FMOD_CHANNELMASK_FRONT_CENTER*: FMOD_CHANNELMASK = 0x00000004
  FMOD_CHANNELMASK_LOW_FREQUENCY*: FMOD_CHANNELMASK = 0x00000008
  FMOD_CHANNELMASK_SURROUND_LEFT*: FMOD_CHANNELMASK = 0x00000010
  FMOD_CHANNELMASK_SURROUND_RIGHT*: FMOD_CHANNELMASK = 0x00000020
  FMOD_CHANNELMASK_BACK_LEFT*: FMOD_CHANNELMASK = 0x00000040
  FMOD_CHANNELMASK_BACK_RIGHT*: FMOD_CHANNELMASK = 0x00000080
  FMOD_CHANNELMASK_BACK_CENTER*: FMOD_CHANNELMASK = 0x00000100

  FMOD_CHANNELMASK_MONO* = FMOD_CHANNELMASK_FRONT_LEFT
  FMOD_CHANNELMASK_STEREO* = FMOD_CHANNELMASK_FRONT_LEFT or FMOD_CHANNELMASK_FRONT_RIGHT
  FMOD_CHANNELMASK_LRC* = FMOD_CHANNELMASK_FRONT_LEFT or FMOD_CHANNELMASK_FRONT_RIGHT or FMOD_CHANNELMASK_FRONT_CENTER
  FMOD_CHANNELMASK_QUAD* = FMOD_CHANNELMASK_FRONT_LEFT or FMOD_CHANNELMASK_FRONT_RIGHT or FMOD_CHANNELMASK_SURROUND_LEFT or FMOD_CHANNELMASK_SURROUND_RIGHT
  FMOD_CHANNELMASK_SURROUND* = FMOD_CHANNELMASK_FRONT_LEFT or FMOD_CHANNELMASK_FRONT_RIGHT or FMOD_CHANNELMASK_FRONT_CENTER or FMOD_CHANNELMASK_SURROUND_LEFT or FMOD_CHANNELMASK_SURROUND_RIGHT
  FMOD_CHANNELMASK_5POINT1* = FMOD_CHANNELMASK_FRONT_LEFT or FMOD_CHANNELMASK_FRONT_RIGHT or FMOD_CHANNELMASK_FRONT_CENTER or FMOD_CHANNELMASK_LOW_FREQUENCY or FMOD_CHANNELMASK_SURROUND_LEFT or FMOD_CHANNELMASK_SURROUND_RIGHT
  FMOD_CHANNELMASK_5POINT1_REARS* = FMOD_CHANNELMASK_FRONT_LEFT or FMOD_CHANNELMASK_FRONT_RIGHT or FMOD_CHANNELMASK_FRONT_CENTER or FMOD_CHANNELMASK_LOW_FREQUENCY or FMOD_CHANNELMASK_BACK_LEFT or FMOD_CHANNELMASK_BACK_RIGHT
  FMOD_CHANNELMASK_7POINT0* = FMOD_CHANNELMASK_FRONT_LEFT or FMOD_CHANNELMASK_FRONT_RIGHT or FMOD_CHANNELMASK_FRONT_CENTER or FMOD_CHANNELMASK_SURROUND_LEFT or FMOD_CHANNELMASK_SURROUND_RIGHT or FMOD_CHANNELMASK_BACK_LEFT or FMOD_CHANNELMASK_BACK_RIGHT
  FMOD_CHANNELMASK_7POINT1* = FMOD_CHANNELMASK_FRONT_LEFT or FMOD_CHANNELMASK_FRONT_RIGHT or FMOD_CHANNELMASK_FRONT_CENTER or FMOD_CHANNELMASK_LOW_FREQUENCY or FMOD_CHANNELMASK_SURROUND_LEFT or FMOD_CHANNELMASK_SURROUND_RIGHT or FMOD_CHANNELMASK_BACK_LEFT or FMOD_CHANNELMASK_BACK_RIGHT

  FMOD_DEFAULT*: FMOD_MODE = 0x00000000
  FMOD_LOOP_OFF*: FMOD_MODE = 0x00000001
  FMOD_LOOP_NORMAL*: FMOD_MODE = 0x00000002
  FMOD_LOOP_BIDI*: FMOD_MODE = 0x00000004
  FMOD_2D*: FMOD_MODE = 0x00000008
  FMOD_3D*: FMOD_MODE = 0x00000010
  FMOD_CREATESTREAM*: FMOD_MODE = 0x00000080
  FMOD_CREATESAMPLE*: FMOD_MODE = 0x00000100
  FMOD_CREATECOMPRESSEDSAMPLE*: FMOD_MODE = 0x00000200
  FMOD_OPENUSER*: FMOD_MODE = 0x00000400
  FMOD_OPENMEMORY*: FMOD_MODE = 0x00000800
  FMOD_OPENMEMORY_POINT*: FMOD_MODE = 0x10000000
  FMOD_OPENRAW*: FMOD_MODE = 0x00001000
  FMOD_OPENONLY*: FMOD_MODE = 0x00002000
  FMOD_ACCURATETIME*: FMOD_MODE = 0x00004000
  FMOD_MPEGSEARCH*: FMOD_MODE = 0x00008000
  FMOD_NONBLOCKING*: FMOD_MODE = 0x00010000
  FMOD_UNIQUE*: FMOD_MODE = 0x00020000
  FMOD_3D_HEADRELATIVE*: FMOD_MODE = 0x00040000
  FMOD_3D_WORLDRELATIVE*: FMOD_MODE = 0x00080000
  FMOD_3D_INVERSEROLLOFF*: FMOD_MODE = 0x00100000
  FMOD_3D_LINEARROLLOFF*: FMOD_MODE = 0x00200000
  FMOD_3D_LINEARSQUAREROLLOFF*: FMOD_MODE = 0x00400000
  FMOD_3D_INVERSETAPEREDROLLOFF*: FMOD_MODE = 0x00800000
  FMOD_3D_CUSTOMROLLOFF*: FMOD_MODE = 0x04000000
  FMOD_3D_IGNOREGEOMETRY*: FMOD_MODE = 0x40000000
  FMOD_IGNORETAGS*: FMOD_MODE = 0x02000000
  FMOD_LOWMEM*: FMOD_MODE = 0x08000000
  FMOD_LOADSECONDARYRAM*: FMOD_MODE = 0x20000000
  FMOD_VIRTUAL_PLAYFROMSTART*: FMOD_MODE = 0x80000000'u32

  FMOD_SYSTEM_CALLBACK_DEVICELISTCHANGED*: FMOD_SYSTEM_CALLBACK_TYPE = 0x00000001
  FMOD_SYSTEM_CALLBACK_DEVICELOST*: FMOD_SYSTEM_CALLBACK_TYPE = 0x00000002
  FMOD_SYSTEM_CALLBACK_MEMORYALLOCATIONFAILED*: FMOD_SYSTEM_CALLBACK_TYPE = 0x00000004
  FMOD_SYSTEM_CALLBACK_THREADCREATED*: FMOD_SYSTEM_CALLBACK_TYPE = 0x00000008
  FMOD_SYSTEM_CALLBACK_BADDSPCONNECTION*: FMOD_SYSTEM_CALLBACK_TYPE = 0x00000010
  FMOD_SYSTEM_CALLBACK_PREMIX*: FMOD_SYSTEM_CALLBACK_TYPE = 0x00000020
  FMOD_SYSTEM_CALLBACK_POSTMIX*: FMOD_SYSTEM_CALLBACK_TYPE = 0x00000040
  FMOD_SYSTEM_CALLBACK_ERROR*: FMOD_SYSTEM_CALLBACK_TYPE = 0x00000080
  FMOD_SYSTEM_CALLBACK_MIDMIX*: FMOD_SYSTEM_CALLBACK_TYPE = 0x00000100
  FMOD_SYSTEM_CALLBACK_THREADDESTROYED*: FMOD_SYSTEM_CALLBACK_TYPE = 0x00000200
  FMOD_SYSTEM_CALLBACK_PREUPDATE*: FMOD_SYSTEM_CALLBACK_TYPE = 0x00000400
  FMOD_SYSTEM_CALLBACK_POSTUPDATE*: FMOD_SYSTEM_CALLBACK_TYPE = 0x00000800
  FMOD_SYSTEM_CALLBACK_RECORDLISTCHANGED*: FMOD_SYSTEM_CALLBACK_TYPE = 0x00001000
  FMOD_SYSTEM_CALLBACK_ALL*: FMOD_SYSTEM_CALLBACK_TYPE = 0xFFFFFFFF'u32

  FMOD_TIMEUNIT_MS*: FMOD_TIMEUNIT = 0x00000001
  FMOD_TIMEUNIT_PCM*: FMOD_TIMEUNIT = 0x00000002
  FMOD_TIMEUNIT_PCMBYTES*: FMOD_TIMEUNIT = 0x00000004
  FMOD_TIMEUNIT_RAWBYTES*: FMOD_TIMEUNIT = 0x00000008
  FMOD_TIMEUNIT_PCMFRACTION*: FMOD_TIMEUNIT = 0x00000010
  FMOD_TIMEUNIT_MODORDER*: FMOD_TIMEUNIT = 0x00000100
  FMOD_TIMEUNIT_MODROW*: FMOD_TIMEUNIT = 0x00000200
  FMOD_TIMEUNIT_MODPATTERN*: FMOD_TIMEUNIT = 0x00000400

  FMOD_PORT_INDEX_NONE*: FMOD_PORT_INDEX = 0xFFFFFFFFFFFFFFFF'u64

  FMOD_REVERB_MAXINSTANCES* = 4

  FMOD_PRESET_OFF* = FMOD_REVERB_PROPERTIES(
    decayTime: 1000,
    earlyDelay: 7,
    lateDelay: 11,
    hfReference: 5000,
    hfDecayRatio: 100,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 20,
    earlyLateMix: 96,
    wetLevel: -80
  )

  FMOD_PRESET_GENERIC* = FMOD_REVERB_PROPERTIES(
    decayTime: 1500,
    earlyDelay: 7,
    lateDelay: 11,
    hfReference: 5000,
    hfDecayRatio: 83,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 14500,
    earlyLateMix: 96,
    wetLevel: -8.0
  )

  FMOD_PRESET_PADDEDCELL* = FMOD_REVERB_PROPERTIES(
    decayTime: 170,
    earlyDelay: 1,
    lateDelay: 2,
    hfReference: 5000,
    hfDecayRatio: 10,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 160,
    earlyLateMix: 84,
    wetLevel: -7.8
  )

  FMOD_PRESET_ROOM* = FMOD_REVERB_PROPERTIES(
    decayTime: 400,
    earlyDelay: 2,
    lateDelay: 3,
    hfReference: 5000,
    hfDecayRatio: 83,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 6050,
    earlyLateMix: 88,
    wetLevel: -9.4
  )

  FMOD_PRESET_BATHROOM* = FMOD_REVERB_PROPERTIES(
    decayTime: 1500,
    earlyDelay: 7,
    lateDelay: 11,
    hfReference: 5000,
    hfDecayRatio: 54,
    diffusion: 100,
    density: 60,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 2900,
    earlyLateMix: 83,
    wetLevel: 0.5
  )

  FMOD_PRESET_LIVINGROOM* = FMOD_REVERB_PROPERTIES(
    decayTime: 500,
    earlyDelay: 3,
    lateDelay: 4,
    hfReference: 5000,
    hfDecayRatio: 10,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 160,
    earlyLateMix: 58,
    wetLevel: -19.0
  )

  FMOD_PRESET_STONEROOM* = FMOD_REVERB_PROPERTIES(
    decayTime: 2300,
    earlyDelay: 12,
    lateDelay: 17,
    hfReference: 5000,
    hfDecayRatio: 64,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 7800,
    earlyLateMix: 71,
    wetLevel: -8.5
  )

  FMOD_PRESET_AUDITORIUM* = FMOD_REVERB_PROPERTIES(
    decayTime: 4300,
    earlyDelay: 20,
    lateDelay: 30,
    hfReference: 5000,
    hfDecayRatio: 59,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 5850,
    earlyLateMix: 64,
    wetLevel: -11.7
  )

  FMOD_PRESET_CONCERTHALL* = FMOD_REVERB_PROPERTIES(
    decayTime: 3900,
    earlyDelay: 20,
    lateDelay: 29,
    hfReference: 5000,
    hfDecayRatio: 70,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 5650,
    earlyLateMix: 80,
    wetLevel: -9.8
  )

  FMOD_PRESET_CAVE* = FMOD_REVERB_PROPERTIES(
    decayTime: 2900,
    earlyDelay: 15,
    lateDelay: 22,
    hfReference: 5000,
    hfDecayRatio: 100,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 20000,
    earlyLateMix: 59,
    wetLevel: -11.3
  )

  FMOD_PRESET_ARENA* = FMOD_REVERB_PROPERTIES(
    decayTime: 7200,
    earlyDelay: 20,
    lateDelay: 30,
    hfReference: 5000,
    hfDecayRatio: 33,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 4500,
    earlyLateMix: 80,
    wetLevel: -9.6
  )

  FMOD_PRESET_HANGAR* = FMOD_REVERB_PROPERTIES(
    decayTime: 10000,
    earlyDelay: 20,
    lateDelay: 30,
    hfReference: 5000,
    hfDecayRatio: 23,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 3400,
    earlyLateMix: 72,
    wetLevel: -7.4
  )

  FMOD_PRESET_CARPETTEDHALLWAY* = FMOD_REVERB_PROPERTIES(
    decayTime: 300,
    earlyDelay: 2,
    lateDelay: 30,
    hfReference: 5000,
    hfDecayRatio: 10,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 500,
    earlyLateMix: 56,
    wetLevel: -24.0
  )

  FMOD_PRESET_HALLWAY* = FMOD_REVERB_PROPERTIES(
    decayTime: 1500,
    earlyDelay: 7,
    lateDelay: 11,
    hfReference: 5000,
    hfDecayRatio: 59,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 7800,
    earlyLateMix: 87,
    wetLevel: -5.5
  )

  FMOD_PRESET_STONECORRIDOR* = FMOD_REVERB_PROPERTIES(
    decayTime: 270,
    earlyDelay: 13,
    lateDelay: 20,
    hfReference: 5000,
    hfDecayRatio: 79,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 9000,
    earlyLateMix: 86,
    wetLevel: -6.0
  )

  FMOD_PRESET_ALLEY* = FMOD_REVERB_PROPERTIES(
    decayTime: 1500,
    earlyDelay: 7,
    lateDelay: 11,
    hfReference: 5000,
    hfDecayRatio: 86,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 8300,
    earlyLateMix: 80,
    wetLevel: -9.8
  )

  FMOD_PRESET_FOREST* = FMOD_REVERB_PROPERTIES(
    decayTime: 1500,
    earlyDelay: 162,
    lateDelay: 88,
    hfReference: 5000,
    hfDecayRatio: 54,
    diffusion: 79,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 760,
    earlyLateMix: 94,
    wetLevel: -12.3
  )

  FMOD_PRESET_CITY* = FMOD_REVERB_PROPERTIES(
    decayTime: 1500,
    earlyDelay: 7,
    lateDelay: 11,
    hfReference: 5000,
    hfDecayRatio: 67,
    diffusion: 50,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 4050,
    earlyLateMix: 66,
    wetLevel: -26.0
  )

  FMOD_PRESET_MOUNTAINS* = FMOD_REVERB_PROPERTIES(
    decayTime: 1500,
    earlyDelay: 300,
    lateDelay: 100,
    hfReference: 5000,
    hfDecayRatio: 21,
    diffusion: 27,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 1220,
    earlyLateMix: 82,
    wetLevel: -24.0
  )

  FMOD_PRESET_QUARRY* = FMOD_REVERB_PROPERTIES(
    decayTime: 1500,
    earlyDelay: 61,
    lateDelay: 25,
    hfReference: 5000,
    hfDecayRatio: 83,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 3400,
    earlyLateMix: 100,
    wetLevel: -5.0
  )

  FMOD_PRESET_PLAIN* = FMOD_REVERB_PROPERTIES(
    decayTime: 1500,
    earlyDelay: 179,
    lateDelay: 100,
    hfReference: 5000,
    hfDecayRatio: 50,
    diffusion: 21,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 1670,
    earlyLateMix: 65,
    wetLevel: -28.0
  )

  FMOD_PRESET_PARKINGLOT* = FMOD_REVERB_PROPERTIES(
    decayTime: 1700,
    earlyDelay: 8,
    lateDelay: 12,
    hfReference: 5000,
    hfDecayRatio: 100,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 20000,
    earlyLateMix: 56,
    wetLevel: -19.5
  )

  FMOD_PRESET_SEWERPIPE* = FMOD_REVERB_PROPERTIES(
    decayTime: 2800,
    earlyDelay: 14,
    lateDelay: 21,
    hfReference: 5000,
    hfDecayRatio: 14,
    diffusion: 80,
    density: 60,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 3400,
    earlyLateMix: 66,
    wetLevel: 1.2
  )

  FMOD_PRESET_UNDERWATER* = FMOD_REVERB_PROPERTIES(
    decayTime: 1500,
    earlyDelay: 7,
    lateDelay: 11,
    hfReference: 5000,
    hfDecayRatio: 10,
    diffusion: 100,
    density: 100,
    lowShelfFrequency: 250,
    lowShelfGain: 0,
    highCut: 500,
    earlyLateMix: 92,
    wetLevel: 7.0
  )

  FMOD_DRIVER_STATE_CONNECTED*: FMOD_DRIVER_STATE = 0x00000001
  FMOD_DRIVER_STATE_DEFAULT*: FMOD_DRIVER_STATE = 0x00000002

  FMOD_CODEC_WAVEFORMAT_VERSION* = 3

  FMOD_DSP_GETPARAM_VALUESTR_LENGTH* = 32

  FMOD_PLUGIN_SDK_VERSION* = 110

  FMOD_OUTPUT_PLUGIN_VERSION* = 3

